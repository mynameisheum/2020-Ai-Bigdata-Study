{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"_10.4 파이토치 RNN 분류 모델.ipynb의 사본","provenance":[{"file_id":"1i2jod5WMThCGDsg7e5o_dCOJ7sPQQD1r","timestamp":1603788739337}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"w7dUbyNVXcEf"},"source":["# 파이토치 RNN 분류 모델\n","- 코드 출처: https://tutorials.pytorch.kr/intermediate/char_rnn_classification_tutorial.html"]},{"cell_type":"code","metadata":{"id":"dB-d43kLYEAi","executionInfo":{"status":"ok","timestamp":1603783912240,"user_tz":-540,"elapsed":2005,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"cc793129-8f58-451d-9577-4a3dd85b34f3","colab":{"base_uri":"https://localhost:8080/","height":618}},"source":["!wget https://download.pytorch.org/tutorial/data.zip\n","!unzip data.zip"],"execution_count":1,"outputs":[{"output_type":"stream","text":["--2020-10-27 07:31:49--  https://download.pytorch.org/tutorial/data.zip\n","Resolving download.pytorch.org (download.pytorch.org)... 99.86.34.8, 99.86.34.23, 99.86.34.116, ...\n","Connecting to download.pytorch.org (download.pytorch.org)|99.86.34.8|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 2882130 (2.7M) [application/zip]\n","Saving to: ‘data.zip’\n","\n","data.zip            100%[===================>]   2.75M  --.-KB/s    in 0.1s    \n","\n","2020-10-27 07:31:49 (25.3 MB/s) - ‘data.zip’ saved [2882130/2882130]\n","\n","Archive:  data.zip\n","   creating: data/\n","  inflating: data/eng-fra.txt        \n","   creating: data/names/\n","  inflating: data/names/Arabic.txt   \n","  inflating: data/names/Chinese.txt  \n","  inflating: data/names/Czech.txt    \n","  inflating: data/names/Dutch.txt    \n","  inflating: data/names/English.txt  \n","  inflating: data/names/French.txt   \n","  inflating: data/names/German.txt   \n","  inflating: data/names/Greek.txt    \n","  inflating: data/names/Irish.txt    \n","  inflating: data/names/Italian.txt  \n","  inflating: data/names/Japanese.txt  \n","  inflating: data/names/Korean.txt   \n","  inflating: data/names/Polish.txt   \n","  inflating: data/names/Portuguese.txt  \n","  inflating: data/names/Russian.txt  \n","  inflating: data/names/Scottish.txt  \n","  inflating: data/names/Spanish.txt  \n","  inflating: data/names/Vietnamese.txt  \n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Vukqoa09LSZw"},"source":["이름: Ślusàrski"]},{"cell_type":"code","metadata":{"id":"2d1pQ-JeYKzw","executionInfo":{"status":"ok","timestamp":1603785100401,"user_tz":-540,"elapsed":917,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"58120116-2b4c-424a-e288-fe1d974df717","colab":{"base_uri":"https://localhost:8080/","height":72}},"source":["# 어느나라 이름인지 맞추는 classification이지\n","from io import open\n","import glob\n","import os\n","\n","def findFiles(path):\n","    return glob.glob(path)\n","\n","\n","\n","print(findFiles('data/names/*.txt'))\n","\n","import unicodedata\n","import string\n","\n","all_letters = string.ascii_letters +\" .,;'\"\n","n_letters = len(all_letters)\n","\n","\n","\n","def unicodeToAscii(s):\n","    return ''.join(\n","        c for c in unicodedata.normalize('NFD', s)\n","        if unicodedata.category(c) != 'Mn' and c in all_letters\n","    )\n","\n","\n","\n","print(unicodeToAscii('Ślusàrski'))    # 뭘로 나올지 출력함 해보고\n","\n","category_lines = {}\n","all_categories = []\n","\n","\n","\n","def readLines(filename):\n","    lines = open(filename, encoding = 'utf-8').read().strip().split('\\n')\n","    return [unicodeToAscii(line) for line in lines]\n","\n","\n","\n","for filename in findFiles('data/names/*.txt'):\n","    category = os.path.splitext(os.path.basename(filename))[0]\n","    all_categories.append(category)\n","    lines = readLines(filename)\n","    category_lines[category] = lines      # 해당하는 키에 언어를 value로 넣는거래\n","\n","n_categories = len(all_categories)\n","\n","\n"],"execution_count":18,"outputs":[{"output_type":"stream","text":["['data/names/French.txt', 'data/names/German.txt', 'data/names/Irish.txt', 'data/names/Scottish.txt', 'data/names/Korean.txt', 'data/names/Dutch.txt', 'data/names/Arabic.txt', 'data/names/Russian.txt', 'data/names/Polish.txt', 'data/names/Chinese.txt', 'data/names/Portuguese.txt', 'data/names/Spanish.txt', 'data/names/English.txt', 'data/names/Japanese.txt', 'data/names/Vietnamese.txt', 'data/names/Italian.txt', 'data/names/Greek.txt', 'data/names/Czech.txt']\n","Slusarski\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"o39feEPmYRdv","executionInfo":{"status":"ok","timestamp":1603785100402,"user_tz":-540,"elapsed":688,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"b3edc478-8f0c-4cd9-c787-6561a967ca65","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# print(category_lines['Italian'][:5])\n","print(category_lines['Italian'][:5])\n","# print(category_lines['Korean'][:5])"],"execution_count":19,"outputs":[{"output_type":"stream","text":["['Abandonato', 'Abatangelo', 'Abatantuono', 'Abate', 'Abategiovanni']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Mkjk05rwYUyx","executionInfo":{"status":"ok","timestamp":1603785674964,"user_tz":-540,"elapsed":718,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"12b2c951-d2b1-4ce8-e8fb-95e3da04c7b0","colab":{"base_uri":"https://localhost:8080/","height":527}},"source":["import torch\n","\n","def letterToIndex(letter):\n","    return all_letters.find(letter) # 저장한 all letersd에서 주어진 파라미터를 찾아주는거지\n","                                    # 전체의 문자중에서 현제 몇번째인지 인덱스 찾아주는거\n","\n","def letterToTensor(letter):\n","    tensor = torch.zeros(1, n_letters)\n","    tensor[0][letterToIndex(letter)] = 1    # tensor로 변환해서 return 해주는거지\n","    return tensor\n","\n","def lineToTensor(line): # 문자 라인 전체를 tensor로 바꿔주는거지\n","    tensor = torch.zeros(len(line), 1 ,n_letters)\n","    for li, letter in enumerate(line):\n","        tensor[li][0][letterToIndex(letter)] = 1        #이러면 원핫백터로 바뀌는 거겟지\n","\n","    return tensor\n","\n","print(letterToTensor('J'))  # all letter중에 j값만 1로 바뀌엇네\n","\n","print(lineToTensor('Jones').size()) # jones의 tensor.size를 출력해보니\n","\n","print(lineToTensor('Jones'))\n","\n","\n","    "],"execution_count":21,"outputs":[{"output_type":"stream","text":["tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,\n","         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","         0., 0., 0.]])\n","torch.Size([5, 1, 57])\n","tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","          0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","          0., 0., 0., 0., 0., 0.]],\n","\n","        [[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,\n","          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","          0., 0., 0., 0., 0., 0.]],\n","\n","        [[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,\n","          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","          0., 0., 0., 0., 0., 0.]],\n","\n","        [[0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","          0., 0., 0., 0., 0., 0.]],\n","\n","        [[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","          0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","          0., 0., 0., 0., 0., 0.]]])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"IPVvWrMHYelv"},"source":["## 신경망 생성\n","\n","- 모델 생성 방법 참고 : https://pytorch.org/tutorials/beginner/former_torchies/nnft_tutorial.html"]},{"cell_type":"code","metadata":{"id":"t6gKYokQYYZW","executionInfo":{"status":"ok","timestamp":1603786059870,"user_tz":-540,"elapsed":924,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["import torch.nn as nn\n","\n","class RNN(nn.Module):\n","    def __init__(self, input_size, hidden_size, output_size):\n","        super(RNN, self).__init__()\n","\n","        self.hidden_size = hidden_size\n","\n","        self.i2h = nn.Linear(input_size + hidden_size, hidden_size)\n","        self.i2o = nn.Linear(input_size + hidden_size, output_size)\n","        self.softmax = nn.LogSoftmax(dim=1)\n","\n","    def forward(self,input, hidden):\n","        combined = torch.cat((input,hidden), 1)\n","        hidden = self.i2h(combined)\n","        output = self.i2o(combined)\n","        output = self.softmax(output)\n","        return output, hidden\n","\n","    def initHidden(self):\n","        return torch.zeros(1, self.hidden_size)\n","\n","n_hidden = 128\n","rnn= RNN(n_letters, n_hidden, n_categories)\n"],"execution_count":26,"outputs":[]},{"cell_type":"code","metadata":{"id":"OKnw9lR4GbDO","executionInfo":{"status":"ok","timestamp":1603786103379,"user_tz":-540,"elapsed":692,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"c1e15137-34e1-4cbf-8c9d-1265e831ebf3","colab":{"base_uri":"https://localhost:8080/","height":142}},"source":[""],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","         0., 0., 0., 0., 0., 0., 0., 0.]])"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"wuFpzGrHYgBY","executionInfo":{"status":"ok","timestamp":1603786237630,"user_tz":-540,"elapsed":583,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"5e0272ff-668a-4ac2-b0f8-5df726e9cb2c","colab":{"base_uri":"https://localhost:8080/","height":70}},"source":["input = letterToTensor('A')\n","hidden = torch.zeros(1, n_hidden)\n","\n","output,next_hidden = rnn(input, hidden)\n","print(output)"],"execution_count":32,"outputs":[{"output_type":"stream","text":["tensor([[-2.8261, -2.9021, -2.8840, -2.8845, -2.9632, -2.8074, -2.9377, -3.0146,\n","         -2.7775, -2.8916, -2.8924, -2.9562, -2.9092, -2.9028, -2.9508, -2.8940,\n","         -2.7935, -2.8719]], grad_fn=<LogSoftmaxBackward>)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wpGGzL2NYku2","executionInfo":{"status":"ok","timestamp":1603786268911,"user_tz":-540,"elapsed":821,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"63f1f8c5-e192-45db-8ada-79ef2c114d43","colab":{"base_uri":"https://localhost:8080/","height":70}},"source":["input = lineToTensor('Albert')\n","hidden = torch.zeros(1, n_hidden)\n","\n","output,next_hidden = rnn(input[0], hidden)\n","print(output)"],"execution_count":34,"outputs":[{"output_type":"stream","text":["tensor([[-2.8261, -2.9021, -2.8840, -2.8845, -2.9632, -2.8074, -2.9377, -3.0146,\n","         -2.7775, -2.8916, -2.8924, -2.9562, -2.9092, -2.9028, -2.9508, -2.8940,\n","         -2.7935, -2.8719]], grad_fn=<LogSoftmaxBackward>)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"q3qAoF6BYrPW"},"source":["## 모델 학습\n","- 준비"]},{"cell_type":"code","metadata":{"id":"WNTCbv4aYoP2","executionInfo":{"status":"ok","timestamp":1603786444911,"user_tz":-540,"elapsed":681,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"0393046a-9b79-4b97-b12c-1e7eabf932ce","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["def categoryFromOutput(output):\n","    top_n, top_i = output.topk(1)   #output결과중 가장 높은 큰갑 한개를 가져오지 // 큰값과 주소, 인덱스를 가져오겟지\n","    category_i = top_i[0].item()\n","    return all_categories[category_i], category_i\n","\n","print(categoryFromOutput(output))\n","\n","\n","# polish로 인덱스 8과함께 나왔네\n","# 알베르트는 polish의 국적을 가진사람으로 나온거지"],"execution_count":36,"outputs":[{"output_type":"stream","text":["('Polish', 8)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aanvL45oYs00","executionInfo":{"status":"ok","timestamp":1603786761884,"user_tz":-540,"elapsed":687,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"706a46ad-36dd-45cb-e561-8272e1841204","colab":{"base_uri":"https://localhost:8080/","height":193}},"source":["import random\n","\n","def randomChoice(l):\n","    return l[random.randint(0,len(l)- 1)]\n","\n","def randomTrainingExample():\n","    category = randomChoice(all_categories)\n","    line = randomChoice(category_lines[category])   #랜덤으로 2개 골라온걸\n","\n","    category_tensor = torch.tensor([all_categories.index(category)], dtype = torch.long)    # category tensor로 변환됐지\n","    line_tensor = lineToTensor(line)    # tensor로 바꾼거지\n","\n","    return category, line, category_tensor, line_tensor\n","\n","for i in range(10):\n","    category, line, category_tensor, line_tensor = randomTrainingExample()\n","    print('category: {}\\t \\tline: {}'.format(category, line))\n","\n","\n","# 랜덤으로 고른 카테고리랑 랜듬으로 고른 이름"],"execution_count":39,"outputs":[{"output_type":"stream","text":["category: Scottish\t \tline: Mccallum\n","category: Spanish\t \tline: Castell\n","category: Italian\t \tline: Bianchi\n","category: French\t \tline: Janvier\n","category: Italian\t \tline: Portoghese\n","category: Korean\t \tline: Mo\n","category: Polish\t \tline: Kozlow\n","category: French\t \tline: Deniau\n","category: French\t \tline: De la fontaine\n","category: Arabic\t \tline: Hadad\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qVA-IZP3Yzz2"},"source":["## 손실함수"]},{"cell_type":"code","metadata":{"id":"Y98Uy0YPYwjY","executionInfo":{"status":"ok","timestamp":1603786829209,"user_tz":-540,"elapsed":654,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["criterion = nn.NLLLoss()"],"execution_count":42,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oDyQIe8lY_Vl"},"source":["## 모델 학습"]},{"cell_type":"code","metadata":{"id":"4vIcTqP8Y9lo","executionInfo":{"status":"ok","timestamp":1603786973357,"user_tz":-540,"elapsed":649,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["learning_rate = 0.005\n","\n","def train(category_tensor, line_tensor):\n","    hidden = rnn.initHidden()\n","\n","    rnn.zero_grad()\n","\n","    for i in range(line_tensor.size()[0]):\n","        output,hidden = rnn(line_tensor[i],hidden)\n","\n","    loss = criterion(output,category_tensor)\n","    loss.backward() # 미분 계산해주고\n","\n","    for p in rnn.parameters():\n","        p.data.add_(p.grad.data, alpha =- learning_rate)\n","\n","    return output, loss.item()"],"execution_count":44,"outputs":[]},{"cell_type":"code","metadata":{"id":"DRDcSbrsZAK9","executionInfo":{"status":"ok","timestamp":1603787585994,"user_tz":-540,"elapsed":125867,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"c1b84ee6-7d2d-4f62-bdf4-b026c7c6abe5","colab":{"base_uri":"https://localhost:8080/","height":369}},"source":["import time\n","import math\n","\n","n_iters = 100000\n","print_every = 5000\n","plot_every = 1000\n","\n","current_loss = 0\n","all_losses = []\n","\n","def timeSince(since):\n","    now = time.time()\n","    s = now - since\n","    m = math.floor(s/60)\n","    s -= m*60\n","\n","    return '%dm %ds' % (m, s)\n","\n","start = time.time()\n","\n","for iter in range(1,n_iters + 1):\n","    category, line, category_tensor, line_tensor = randomTrainingExample()\n","    output, loss =train(category_tensor, line_tensor)\n","    current_loss += loss\n","\n","    if iter % print_every == 0: # 5000번 마다\n","        guess , guess_i = categoryFromOutput(output) # 추측한 결과가 진짜 맞는지확인\n","        correct = '0' if guess == category else 'X (%s)' % category\n","        print('%d %d%% (%s) %.4f %s / %s %s' % (iter, iter/n_iters * 100 , timeSince(start),loss, line,guess, correct )) \n","\n","    if iter % plot_every == 0:\n","        all_losses.append(current_loss / plot_every)    # 저장해주고\n","        current_loss = 0\n"],"execution_count":48,"outputs":[{"output_type":"stream","text":["5000 5% (0m 6s) 1.9584 Hladky / Czech 0\n","10000 10% (0m 12s) 2.2400 Middlesworth / Italian X (Dutch)\n","15000 15% (0m 18s) 0.3931 Panoulias / Greek 0\n","20000 20% (0m 24s) 2.6525 Turke / Polish X (English)\n","25000 25% (0m 30s) 2.0586 Vogel / Dutch X (German)\n","30000 30% (0m 37s) 1.8958 Hanika / Japanese X (Czech)\n","35000 35% (0m 43s) 3.4914 Gavin / Irish X (English)\n","40000 40% (0m 49s) 0.8893 Subertova / Czech 0\n","45000 45% (0m 55s) 0.9990 Tableriou / Greek 0\n","50000 50% (1m 2s) 2.1818 Rafferty / Portuguese X (English)\n","55000 55% (1m 9s) 1.5965 Saliba / Arabic 0\n","60000 60% (1m 15s) 1.1230 Chu / Vietnamese X (Korean)\n","65000 65% (1m 21s) 0.4713 Mustafa / Arabic 0\n","70000 70% (1m 27s) 0.3301 Gutierrez / Spanish 0\n","75000 75% (1m 33s) 0.3513 Fakhoury / Arabic 0\n","80000 80% (1m 40s) 0.8498 Maestri / Italian 0\n","85000 85% (1m 46s) 2.1197 Simoes / Greek X (Portuguese)\n","90000 90% (1m 52s) 2.8099 Muir / Chinese X (Scottish)\n","95000 95% (1m 58s) 2.2125 Abbing / French X (German)\n","100000 100% (2m 5s) 0.6631 Tokuoka / Japanese 0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"cSwAjR6QZDRf","executionInfo":{"status":"ok","timestamp":1603787655490,"user_tz":-540,"elapsed":781,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"379558eb-5cc3-48bb-d559-661823ae713f","colab":{"base_uri":"https://localhost:8080/","height":262}},"source":["import matplotlib.ticker as ticker\n","import matplotlib.pyplot as plt\n","plt.style.use('seaborn-white')\n","\n","plt.figure()\n","plt.plot(all_losses)\n","plt.show()  # 저장한값 불러와!"],"execution_count":49,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"J0_2HyE3ZPZk"},"source":["## 모델 테스트"]},{"cell_type":"code","metadata":{"id":"QCQfgHi-OR4d","executionInfo":{"status":"ok","timestamp":1603788156149,"user_tz":-540,"elapsed":858,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"a89b8a68-b204-421d-fd8f-44cd6ff1170c","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":[""],"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["18"]},"metadata":{"tags":[]},"execution_count":53}]},{"cell_type":"code","metadata":{"id":"MBVWJNmoZO8a","executionInfo":{"status":"ok","timestamp":1603788276117,"user_tz":-540,"elapsed":8670,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"b2f3a466-e947-4a2a-8eb1-0b177cb91862","colab":{"base_uri":"https://localhost:8080/","height":311}},"source":["confusion = torch.zeros(n_categories, n_categories)  # n by n 메트리스 만들고\n","\n","n_confusion = 10000\n","\n","def evaluate(line_tensor):\n","    hidden = rnn.initHidden()\n","\n","    for i in range(line_tensor.size()[0]):\n","        output, hidden = rnn(line_tensor[i], hidden)\n","\n","    return output\n","\n","for i in range(n_confusion):\n","    category, line, category_tensor, line_tensor = randomTrainingExample()\n","    output = evaluate(line_tensor)\n","    guess , guess_i = categoryFromOutput(output)\n","\n","    category_i = all_categories.index(category)\n","    confusion[category_i][guess_i] += 1 # 진짜 카테고리와 모델에서 나온 결과값 위치에 1을 해주는거지\n","                                        # 잘 맞췃으면 대각선만 1 나오겟지\n","\n","for i in range(n_categories):\n","    confusion[i] = confusion[i] / confusion[i].sum()    # 0~1사이의 normalize값을 갖겠지\n","\n","fig =plt.figure()\n","ax = fig.add_subplot(111)\n","cax = ax.matshow(confusion.numpy())\n","fig.colorbar(cax)\n","ax.set_xticklabels([''] + all_categories, rotation = 90)    # 90도로 꺽어줄게\n","ax.set_yticklabels([''] + all_categories)\n","ax.xaxis.set_major_locator(ticker.MultipleLocator(1))\n","ax.yaxis.set_major_locator(ticker.MultipleLocator(1))\n","\n","\n","\n"],"execution_count":59,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"AfjRYlioZV3o"},"source":["## 사용자 입력으로부터의 실행"]},{"cell_type":"code","metadata":{"id":"uteG1Je5ZQWg","executionInfo":{"status":"ok","timestamp":1603788702442,"user_tz":-540,"elapsed":849,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"d2abb66f-b043-40d3-bf57-9773d97b7ee5","colab":{"base_uri":"https://localhost:8080/","height":457}},"source":["def predict(input_line, n_predictions = 3):\n","    print('\\n> %s' % input_line)\n","    with torch.no_grad():   # 이건 prediction이니까 grad하면 안되어요\n","\n","        output = evaluate(lineToTensor(input_line))\n","\n","        topv, topi = output.topk(n_predictions, 1 , True)\n","        predictions = []\n","\n","        for i in range(n_predictions):\n","            value = topv[0][i].item()\n","            category_index = topi[0][i].item()\n","            print('(%.2f) %s' % (value, all_categories[category_index]))\n","\n","            predictions.append([value, all_categories[category_index]])\n","\n","predict('Jackson')\n","predict('Bill')\n","predict('Dovesky')\n","predict('yuri')\n","predict('Lee')\n"],"execution_count":66,"outputs":[{"output_type":"stream","text":["\n","> Jackson\n","(-0.14) Scottish\n","(-2.73) English\n","(-3.91) Korean\n","\n","> Bill\n","(-1.65) Czech\n","(-1.65) English\n","(-1.89) Irish\n","\n","> Dovesky\n","(-0.67) Czech\n","(-0.93) Russian\n","(-3.49) English\n","\n","> yuri\n","(-0.61) Japanese\n","(-1.53) Italian\n","(-3.19) English\n","\n","> Lee\n","(-0.64) Chinese\n","(-1.89) Vietnamese\n","(-2.04) Korean\n"],"name":"stdout"}]}]}