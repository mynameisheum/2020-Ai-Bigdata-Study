{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"박성흠 - _3 신경망 데이터 표현","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"ebow7b5dS-KW"},"source":["# 신경망 데이터 표현"]},{"cell_type":"code","metadata":{"id":"9BDaiyTNBFAN","executionInfo":{"status":"ok","timestamp":1601903513762,"user_tz":-540,"elapsed":1319,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","plt.style.use(['seaborn-whitegrid'])"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7Ic-YQ7xBQ9m"},"source":["## 텐서(Tensor)\n","- 일반적으로 텐서는 3차원 이상을 다룰 때 표현하는 방식이지만, 여기서는 어떠한 데이터를 표현할 때, 그 값 모두를 텐서라고 부르기로 함\n","\n","      a = np.array([1, 2])\n","      b = np.array([[1, 2],\n","                    [3, 4]])\n","      c = np.array([10]) \n","      d = np.array(3)  \n","  \n","    a, b, c, d 모두 텐서라고 지칭할 수 있음\n","  \n","- 랭크(rank): 텐서의 축을 나타내고, 넘파이(numpy)의 `ndim`으로 구할 수 있음\n","\n","      a = np.array([1, 2])\n","        >> ndim = 1  \n","      b = np.array([[1, 2],\n","                    [3, 4]])\n","        >> ndim = 2\n","      d = np.array(3)\n","        >> ndim = 0\n","      \n","    위의 예시에서 알 수 있듯이 대괄호( [ ] )의 개수가 곧 랭크(축)의 값\n","    \n","      \n","- 크기(shape): 텐서의 각 축을 따라 얼마나 많은 차원이 있는지를 나타내며, 파이썬의 튜플(tuple) 형태\n"]},{"cell_type":"markdown","metadata":{"id":"ehzSlqdjBVxB"},"source":["## 그림으로 이해하기\n","\n","![array](https://www.oreilly.com/library/view/elegant-scipy/9781491922927/assets/elsp_0105.png)\n","<br /><sub>출처: https://www.oreilly.com/library/view/elegant-scipy/9781491922927/ch01.html</sub>"]},{"cell_type":"markdown","metadata":{"id":"AxZDqX5HBYMf"},"source":["## 스칼라(0차원 텐서)\n","- 하나의 숫자를 담고 있는 텐서(tensor)\n","- 형상은 없음"]},{"cell_type":"code","metadata":{"id":"TicFogkHBPRW","executionInfo":{"status":"ok","timestamp":1601910177792,"user_tz":-540,"elapsed":805,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"f00edef8-6b15-4117-fd85-324432a81e2c","colab":{"base_uri":"https://localhost:8080/","height":70}},"source":["x = np.array(3)\n","print(x)\n","print(x.shape)  # 쉐입도 없누ㅠㅠ\n","print(np.ndim(x))"],"execution_count":2,"outputs":[{"output_type":"stream","text":["3\n","()\n","0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"rab-I4gyBeZw"},"source":["## 벡터(1차원 텐서)\n","- 숫자의 배열을 나타내는 텐서\n"]},{"cell_type":"code","metadata":{"id":"s4gm0mRVBZwa","executionInfo":{"status":"ok","timestamp":1601910246880,"user_tz":-540,"elapsed":615,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"a49c6239-f0f8-4e3c-9fbe-731751dbed7c","colab":{"base_uri":"https://localhost:8080/","height":70}},"source":["x = np.array([1,2,3,4])\n","print(x)\n","print(x.shape)\n","print(np.ndim(x))"],"execution_count":3,"outputs":[{"output_type":"stream","text":["[1 2 3 4]\n","(4,)\n","1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"-S3G7ym8Bh6I"},"source":["### 벡터의 합\n","- 같은 형상(shape)일 때, 각 원소별로 계산"]},{"cell_type":"code","metadata":{"id":"6pzPyoNqBcgn","executionInfo":{"status":"ok","timestamp":1601910343037,"user_tz":-540,"elapsed":1226,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"837ca626-e15e-4698-faf3-1d7d5f4e588e","colab":{"base_uri":"https://localhost:8080/","height":70}},"source":["a = np.array([1,2,3,4])\n","b = np.array([5,6,7,8])\n","c = a+b\n","\n","print(c)\n","print(c.shape)\n","print(np.ndim(c))"],"execution_count":4,"outputs":[{"output_type":"stream","text":["[ 6  8 10 12]\n","(4,)\n","1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RqnBR8DyBla5"},"source":["### 벡터의 곱\n","-  $A = (x_1, \\ x_2, \\ x3, \\ ..., \\ x_n)$  \n","  $B = (y_1, \\ y_2, \\ y3, \\ ..., \\ y_n)$ 일 때,\n","- 원소곱\n","  - 같은 형상(shape)일 때, 각 원소별로 계산   \n","   \n","    $A \\times B = (x_1, \\ x_2, \\ x_3, \\ ..., \\ x_n) \\times (y_1, \\ y_2, \\ y_3, \\ ..., \\ y_n) \\\\   \n","    \\qquad = (x_1y_1, \\ x_2y_2, \\ x_3y_3, \\ ... \\ ,  \\ x_ny_n)  $\n","    \n","- 벡터곱(product, dot)\n","  - 두 1차원 벡터가 있을 때 **각각의 성분끼리의 곱을 모두 더하는 계산**  \n","  \n","    $A \\bullet B \\Rightarrow A \\times B^T = (x_1, \\ x_2, \\ x_3, \\ ..., \\ x_n) \\begin{pmatrix} y_1 \\\\ y_2 \\\\ y_3 \\\\ ... \\\\ y_n  \\end{pmatrix} \\\\  \n","    \\qquad = (x_1y_1 + \\ x_2y_2 + \\ x_3y_3 + \\ ... + \\ x_ny_n)  $\n","  "]},{"cell_type":"code","metadata":{"id":"kxcrUZPwBceX","executionInfo":{"status":"ok","timestamp":1601910667658,"user_tz":-540,"elapsed":687,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"eada4573-131b-4b4e-e4d9-b2dfe47e419f","colab":{"base_uri":"https://localhost:8080/","height":140}},"source":["# 원소 곱은 shape이 유지된채로 각 성분만 곱하는거고 -> 결과 :vector값\n","# 백터 곱은 각 성분을 다 곱해서 다 더한거고  -> 결과 :스칼라값\n","\n","a = np.array([1,2,3,4])\n","b = np.array([5,6,7,8])\n","c = a*b\n","print(c)\n","print(c.shape)\n","print(np.ndim(c))\n","print('----------------------')\n","x = np.array([1,2,0])\n","y = np.array([0,2,1])\n","z = np.dot(x,y)             # x* y(T) // 백터 곱이지 // 결과는 스칼라고\n","print(z)\n","print(z.shape)\n","print(np.ndim(z))"],"execution_count":5,"outputs":[{"output_type":"stream","text":["[ 5 12 21 32]\n","(4,)\n","1\n","----------------------\n","4\n","()\n","0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"IIKrmykBBpn4"},"source":["## 스칼라와 벡터의 곱\n"]},{"cell_type":"code","metadata":{"id":"CWNGJnA9BcaU","executionInfo":{"status":"ok","timestamp":1601910739703,"user_tz":-540,"elapsed":618,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"4b9ebd58-09a6-4ae3-e74d-e5e807fea2fb","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a = np.array(10)\n","b = np.array([1,2,3])\n","print(a*b)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["[10 20 30]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"a_WUc48rBszu"},"source":["## 2차원 텐서(행렬)\n","- 2차원 텐서는 행렬로 생각할 수 있음\n","    - (m, n) 형상의 배열\n","\n","![matrix](https://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Matrix_ko.svg/570px-Matrix_ko.svg.png)\n","<br /><sub>출처: https://ko.wikipedia.org/wiki/%ED%96%89%EB%A0%AC</sub>\n"]},{"cell_type":"code","metadata":{"id":"M6QQeHZJBcX6","executionInfo":{"status":"ok","timestamp":1601910894534,"user_tz":-540,"elapsed":794,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"8e458080-e9a0-433e-ea73-362b9d725403","colab":{"base_uri":"https://localhost:8080/","height":158}},"source":["matrix = np.array([[1,2,3],\n","                   [4,5,6]])\n","\n","print(matrix)\n","print(matrix.shape)\n","print(np.ndim(matrix))\n","print('----------------------------')\n","matrix2 = np.array([[1,2,3,4]])\n","print(matrix2)\n","print(matrix2.shape)\n","print(np.ndim(matrix2))"],"execution_count":7,"outputs":[{"output_type":"stream","text":["[[1 2 3]\n"," [4 5 6]]\n","(2, 3)\n","2\n","----------------------------\n","[[1 2 3 4]]\n","(1, 4)\n","2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6LEedf9GB2G1"},"source":["### 행렬 원소곱\n","- 같은 형상(shape)일 때 덧셈, 곱셈과 같은 연산은 원소별로 진행\n"]},{"cell_type":"code","metadata":{"id":"PchJ4TwyBcVc","executionInfo":{"status":"ok","timestamp":1601911038798,"user_tz":-540,"elapsed":700,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"7dc9f421-a834-41ee-ff39-eddb2c230eaf","colab":{"base_uri":"https://localhost:8080/","height":175}},"source":["A = np.array([[1,2],[3,4]])\n","B = np.array([[10,10],[10,10]])\n","\n","print('행렬 A\\n', A)\n","print('행렬 B\\n', B)\n","print('A * B \\n', A*B)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["행렬 A\n"," [[1 2]\n"," [3 4]]\n","행렬 B\n"," [[10 10]\n"," [10 10]]\n","A * B \n"," [[10 20]\n"," [30 40]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_cvFlhuCB5hz"},"source":["### 행렬 점곱(내적, product)\n","- 1차원 벡터와 마찬가지로 앞 행렬의 열과 뒤 행렬의 행의 수가 같아야함"]},{"cell_type":"code","metadata":{"id":"452G60yvBcRr","executionInfo":{"status":"ok","timestamp":1601911203661,"user_tz":-540,"elapsed":748,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"ee2f8fd5-de1c-4524-e479-fbf677148923","colab":{"base_uri":"https://localhost:8080/","height":210}},"source":["M = np.array([[1,2],[3,4]])\n","N = np.array([[2,3,4],[2,3,4]])\n","print('행렬 M\\n',M)\n","print('행렬 N\\n',N)\n","\n","L = np.dot(M,N)\n","print('행렬 L\\n', L)\n","print(L.shape)\n","print(np.ndim(L))"],"execution_count":11,"outputs":[{"output_type":"stream","text":["행렬 M\n"," [[1 2]\n"," [3 4]]\n","행렬 N\n"," [[2 3 4]\n"," [2 3 4]]\n","행렬 L\n"," [[ 6  9 12]\n"," [14 21 28]]\n","(2, 3)\n","2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oSgCXPJzBb0_","executionInfo":{"status":"error","timestamp":1601911263903,"user_tz":-540,"elapsed":841,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"854aee5b-9b2a-4cdd-a9b4-ee54d4cf1b7e","colab":{"base_uri":"https://localhost:8080/","height":274}},"source":["m = np.array([[1],[2],[3]])\n","n = np.array([[1],[2],[3]])\n","l = np.dot(m,n)\n","\n","print(l)\n","print(l.shape)\n","print(np.ndim(l))"],"execution_count":12,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-6ed0118f52db>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0ml\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mdot\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: shapes (3,1) and (3,1) not aligned: 1 (dim 1) != 3 (dim 0)"]}]},{"cell_type":"markdown","metadata":{"id":"gfWlP-BtCAzE"},"source":["### 역행렬\n","- 어떤 행렬 A가 있을 때, 곱해서 단위행렬(E)를 만드는 행렬 B가 존재한다면, 행렬 B는 A의 역행렬"]},{"cell_type":"code","metadata":{"id":"0i_L09ggBbwa","executionInfo":{"status":"ok","timestamp":1601911622279,"user_tz":-540,"elapsed":711,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"4c9374a1-c4d7-48ef-b099-a91e645bb96b","colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["A = np.array([[1,2],[3,4]])\n","print(A)\n","\n","B= np.linalg.inv(A)\n","print(B)\n","\n","print(np.dot(A,B))\n","#부동소수 오차 걱정 ㄴㄴ"],"execution_count":15,"outputs":[{"output_type":"stream","text":["[[1 2]\n"," [3 4]]\n","[[-2.   1. ]\n"," [ 1.5 -0.5]]\n","[[1.0000000e+00 0.0000000e+00]\n"," [8.8817842e-16 1.0000000e+00]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"bywOpubYYTs8"},"source":["- B 행렬 자체가 역행력이 존재하지 않을떄"]},{"cell_type":"code","metadata":{"id":"Ra6130CkBbuz","executionInfo":{"status":"error","timestamp":1601911727131,"user_tz":-540,"elapsed":594,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"ee8a71db-8399-4f72-cd7b-0cdd22dabd93","colab":{"base_uri":"https://localhost:8080/","height":386}},"source":["B = np.array([[3,3],[2,2]])\n","print(np.linalg.inv(B))\n","# "],"execution_count":16,"outputs":[{"output_type":"error","ename":"LinAlgError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mLinAlgError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-e71f33517a2d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mB\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinalg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mB\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36minv\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/linalg/linalg.py\u001b[0m in \u001b[0;36minv\u001b[0;34m(a)\u001b[0m\n\u001b[1;32m    545\u001b[0m     \u001b[0msignature\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'D->D'\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0misComplexType\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m'd->d'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    546\u001b[0m     \u001b[0mextobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_linalg_error_extobj\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_raise_linalgerror_singular\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 547\u001b[0;31m     \u001b[0mainv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_umath_linalg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msignature\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextobj\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mextobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    548\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mainv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult_t\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    549\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/linalg/linalg.py\u001b[0m in \u001b[0;36m_raise_linalgerror_singular\u001b[0;34m(err, flag)\u001b[0m\n\u001b[1;32m     95\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     96\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_raise_linalgerror_singular\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflag\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 97\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mLinAlgError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Singular matrix\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     98\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     99\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_raise_linalgerror_nonposdef\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflag\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mLinAlgError\u001b[0m: Singular matrix"]}]},{"cell_type":"markdown","metadata":{"id":"G75LpaMmCGtW"},"source":["### 전치행렬\n","- 행과 열을 바꾼 배열의 형태\n","\n","![](https://upload.wikimedia.org/wikipedia/commons/e/e4/Matrix_transpose.gif)\n","<br /><sub>출처: https://ko.wikipedia.org/wiki/%EC%A0%84%EC%B9%98%ED%96%89%EB%A0%AC</sub>"]},{"cell_type":"code","metadata":{"id":"3QKPQKIjBbre","executionInfo":{"status":"ok","timestamp":1601911946470,"user_tz":-540,"elapsed":801,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"e96132bf-00d3-4b61-a5b3-49bb15b3f79a","colab":{"base_uri":"https://localhost:8080/","height":263}},"source":["A = np.array([[1,2,3],[4,5,6]])\n","print('A\\n',A)\n","print('A.shape\\n', A.shape)\n","print('----------------------')\n","\n","A_ = A.T\n","print('A의 전치행렬\\n', A_)\n","print('(A.T)의 shape \\n', A_.shape)\n","\n","B_= A_.T\n","print(B_)"],"execution_count":18,"outputs":[{"output_type":"stream","text":["A\n"," [[1 2 3]\n"," [4 5 6]]\n","A.shape\n"," (2, 3)\n","----------------------\n","A의 전치행렬\n"," [[1 4]\n"," [2 5]\n"," [3 6]]\n","(A.T)의 shape \n"," (3, 2)\n","[[1 2 3]\n"," [4 5 6]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NubNYgh6CKpY"},"source":["## 3차원 텐서\n","- 보통 이미지를 나타낼 때 사용되는 텐서\n","  - (width, height, channels)\n","  - 일반적으로 Numpy array로 표현  \n","![3d tensor](https://image.slidesharecdn.com/tensordecomposition-170301235239/95/a-brief-survey-of-tensors-5-638.jpg)\n","<br /><sub>출처: https://www.slideshare.net/BertonEarnshaw/a-brief-survey-of-tensors</sub>\n","- 시계열 데이터 또는 시퀀스(sequence) 데이터를 표현할 때도 사용\n","  - (samples, timesteps, features)\n","  - (예시) 주식 가격 데이터셋, 시간에 따른 질병 발병 건수  \n","![](https://kr.mathworks.com/help/deeplearning/examples/timeseriesforecastingusingdeeplearningexample_01_ko_KR.png)\n","<br /><sub>출처: https://kr.mathworks.com/help/deeplearning/examples/time-series-forecasting-using-deep-learning.html</sub>"]},{"cell_type":"code","metadata":{"id":"IvVjleI1Bbpn","executionInfo":{"status":"ok","timestamp":1601912320448,"user_tz":-540,"elapsed":1035,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"30c8ea2c-6d60-416e-fece-259bdf456691","colab":{"base_uri":"https://localhost:8080/","height":281}},"source":["X = np.array([[[5,3,2,1],\n","               [5,5,3,1],\n","               [6,1,2,3]],\n","              [[1,1,1,1],\n","               [3,4,7,5],\n","               [1,8,3,4]],\n","              [[10,9,3,9],\n","               [5,4,3,2],\n","               [7,6,3,4]]])\n","print('X \\n', X, end= '\\n\\n')\n","print('X.shape : ', X.shape )\n","print('X.ndim : ', X.ndim)"],"execution_count":19,"outputs":[{"output_type":"stream","text":["X \n"," [[[ 5  3  2  1]\n","  [ 5  5  3  1]\n","  [ 6  1  2  3]]\n","\n"," [[ 1  1  1  1]\n","  [ 3  4  7  5]\n","  [ 1  8  3  4]]\n","\n"," [[10  9  3  9]\n","  [ 5  4  3  2]\n","  [ 7  6  3  4]]]\n","\n","X.shape :  (3, 3, 4)\n","X.ndim :  3\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"CJdUSaqKBbmG","executionInfo":{"status":"ok","timestamp":1601912461750,"user_tz":-540,"elapsed":684,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"70ba25cc-8852-4f9a-9f8a-ba5aae03a3f5","colab":{"base_uri":"https://localhost:8080/","height":298}},"source":["B = np.array([[[2,3,4], [2,3,4]],\n","              [[1,1,1], [1,1,1]]])\n","print('행렬 B \\n', B, end= '\\n\\n')\n","print('B의 전치행렬 \\n', B.T)"],"execution_count":20,"outputs":[{"output_type":"stream","text":["행렬 B \n"," [[[2 3 4]\n","  [2 3 4]]\n","\n"," [[1 1 1]\n","  [1 1 1]]]\n","\n","B의 전치행렬 \n"," [[[2 1]\n","  [2 1]]\n","\n"," [[3 1]\n","  [3 1]]\n","\n"," [[4 1]\n","  [4 1]]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"OoBfPQdhCPog"},"source":["### 3차원 텐서 활용 예시(이미지)\n","- MNIST Dataset\n","- 28x28 사이즈의 gray scale 이미지들로 구성  \n","![이미지](https://upload.wikimedia.org/wikipedia/commons/thumb/2/27/MnistExamples.png/440px-MnistExamples.png)  \n","<sub>출처: https://ko.wikipedia.org/wiki/MNIST_%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4</sub>\n","\n","  \n","- gray scale: 0~255의 값을 통해 밝기를 표현 \n","  0으로 갈수록 어두워지고, 255로 갈수록 밝아짐 \n","![이미지](https://miro.medium.com/max/1400/1*euc4RxnNo78LFEGrb-QZ7w.jpeg)  \n","<sub>출처: https://medium.com/@himnickson/converting-rgb-image-to-the-grayscale-image-in-java-9e1edc5bd6e7</sub>\n","\n"]},{"cell_type":"code","metadata":{"id":"YmGkMLmEBbkh","executionInfo":{"status":"ok","timestamp":1601912585347,"user_tz":-540,"elapsed":968,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"f42acfd9-35ad-448b-b35f-e3b38cd96447","colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["from keras.datasets import mnist\n","\n","(train_images, train_labels), (test_images, test_labels) = mnist.load_data()"],"execution_count":21,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7zV5i29eBbgo","executionInfo":{"status":"ok","timestamp":1601912596274,"user_tz":-540,"elapsed":768,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"afd33fe0-f9d6-477a-c141-3a9b1c7e9e15","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(train_images.ndim)\n"],"execution_count":22,"outputs":[{"output_type":"stream","text":["3\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yWpHOjFyBbfN","executionInfo":{"status":"ok","timestamp":1601912605723,"user_tz":-540,"elapsed":648,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"f876d5b0-746e-45d0-84ed-f0ea32b71507","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(train_images.shape)"],"execution_count":23,"outputs":[{"output_type":"stream","text":["(60000, 28, 28)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"tRwClWKsBbcg","executionInfo":{"status":"ok","timestamp":1601912626623,"user_tz":-540,"elapsed":783,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"e2b20a01-abc9-4078-ed59-658c384fdf7e","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(train_images.dtype)"],"execution_count":24,"outputs":[{"output_type":"stream","text":["uint8\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WlN4f8mmBbZI","executionInfo":{"status":"ok","timestamp":1601912667758,"user_tz":-540,"elapsed":844,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"00f53ff1-8b35-4580-ebc6-7ccc4b55685c","colab":{"base_uri":"https://localhost:8080/","height":262}},"source":["temp_image = train_images[4]\n","plt.imshow(temp_image, cmap='gray') # 경계가 회색\n","plt.show()"],"execution_count":26,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAPYAAAD1CAYAAABjhghmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAQtElEQVR4nO3df4wUdZrH8fc4guiwDouCet4io9w82ZG/bI26UWFvWdkzd2oiqyQqCiZLcFHjxURXjcGfe5EYj/NXopyLA24UlSw/1siKdy6avbB25yTrjj7nykQj40XQIMoKMtj3xzSd7r7uqu6e6h98+bySiVX9dFU/9syHqq6qrm9HNptFRMJyRKsbEJHkKdgiAVKwRQKkYIsESMEWCZCCLRKgI+td0MweBs4BssBN7v5WYT2Tyeg8mkiDpVKpjrKFbDZb809vb++M3t7eDbnp7/f29v5X6XPS6XSWkdBngWx/f3/RfDv9tGtv7dqXemuP3tLpdLZSRuvdFf8R8BsAd38X+K6ZHVvnukQkYfUG+0RgR8H8jtxjItIG6v6MXaLsfn5/f39+uqenp2i+nbRrb+3aF6i3ejWttzo/Yy/p7e1dWDC/rbe39zv6jH149KXe2qO3RnzG/h0wB8DMzgCG3P3LOtclIgmrK9ju/gcgY2Z/AP4N+HmiXYnIqNT9Gdvdb0uyERFJjq48EwmQgi0SIAVbJEAKtkiAFGyRACnYIgFSsEUCpGCLBEjBFgmQgi0SIAVbJEAKtkiAFGyRACnYIgFSsEUCpGCLBEjBFgmQgi0SIAVbJEAKtkiAFGyRACnYIgFSsEUCpGCLBEjBFgmQgi0SIAVbJEAKtkiAFGyRACnYIgGqaxhdM5sJvAD8OffQn9z9hqSaEpHRqXt8bOD37j4nsU5EJDHaFRcJ0Gi22H1mtg6YCNzt7q8m1JOIjFJHNputeSEzOxk4D1gNnAr8JzDN3b85+JxMJpMdGBjIL9PT08Pg4OCoG26Edu2tXfsC9VavJHvr6+sjlUp1lC1ms9lR//T29v6xt7e3p/CxdDqdBfI//f39RfPt9NOuvbVrX+qtPXpLp9PZSpms6zO2mV1pZrfkpk8ETgC217MuEUlevZ+x1wG/NrNLgLHAosLdcBFprbqC7e5fAv+UcC8ikhCd7hIJkIItEiAFWyRACrZIgBRskQCN5pJSaTNnn312ZP2qq66KrM+YMSOyfvrpp+en33vvPQ4cOFB1b7fccktkfWhoKLJ+3nnnRdZXrVqVn+7q6ip6L7Zs2VJFh2HRFlskQAq2SIAUbJEAKdgiAVKwRQKkYIsESMEWCZDOYx9irrjiioq1ZcuWRS57/PHHR9Y7OsrfjOOg119/PT/d1dVVNA8wadKkissuXbo0ct1x4norfO0TTjiBm2++OT8/d+7cUb32oUhbbJEAKdgiAVKwRQKkYIsESMEWCZCCLRIgBVskQDqP3WRHHhn9lp955pn56fHjx3POOecU1Z966qmKyx5zzDGR6968eXNk/d57742sv/nmm/npp59+mgULFhTVjzrqqIrLrl69OnLdF154YWQ9Tjqdzk9PnDixaP5wpC22SIAUbJEAKdgiAVKwRQKkYIsESMEWCZCCLRIgncdusrh7ey9fvjw/7e5F547jvPrqq5H1qO9yA+zevbvq18pms+zfv7/q9Y/2PPXHH38cWX/mmWfy02eccUbR/OGoqmCb2XRgLfCwuz9qZt8DVgKdwCfA1e6+r3FtikgtYnfFzawLeAR4reDhe4DH3P184C/AgnLLikhrVPMZex9wEVA4BstMYF1uej0wK9m2RGQ0OrLZbFVPNLMlwM7crvin7j459/hpwEp3/0Hh8zOZTHZgYCA/39PTw+DgYGKNJ6mZvcXdd+yUU07JT+/du5dx48ZVve64z8jbtm2LrNcyFle59+y4446r+PypU6dWve5ySj/Plyr8W5syZQofffRRfn54eHhUr52kJP/W+vr6SKVSZW8Gl8TBs4p3mZs3b15+ur+/v2i+nTSzt2uvvTayXnrwzMyqXnfcwbNFixZF1ms5eFbuPYs6MLhixYqq113O9u3bI+s33XRTfnrZsmVF8zt27BjVaycpyb+1qC+61Hu66yszOzo3fTLFu+ki0mL1BnsTcFlu+jLglWTaEZEkxO6Km1kKeAiYCuw3sznAlcAKM1sIfAgc3icNC8R9p/n222+PrMcd83j88ccr1u68887IZWvZ1a7HHXfc0bB133jjjZH1wt3t4eHhttr9boXYYLt7hpGj4KV+nHg3IpIIXVIqEiAFWyRACrZIgBRskQAp2CIB0tc2a3TXXXdF1uNOZ33zzTeR9Y0bN+anJ0+ezIYNG4rqt956a8Vlv/7668h1x4m7fLXwq5cTJkzg4osvLqpPmTKl4rJxw+Ded999kfW1a9dG1qWYttgiAVKwRQKkYIsESMEWCZCCLRIgBVskQAq2SIB0HruMCRMmVKxdf/31kcvGfe2y8Dx1OZdeeml+Ouk7u0ybNi2y/uyzz0bWU6lUftrdWbNmTdWv/eKLL0bWH3zwwarXJfG0xRYJkIItEiAFWyRACrZIgBRskQAp2CIBUrBFAqTz2GWMHTu2Yi1uiJ44cbfRnTx5cn56zJgxRfMA8+fPr7hs6fejS02fPj2yPn78+Mh63Dn6qPqqVasil92zZ09kXWqjLbZIgBRskQAp2CIBUrBFAqRgiwRIwRYJkIItEiCdxy4j6t7fccOzTpo0KbI+ODgYWS88F+zuDA0NRT6/FnHrihtm96STToqs79y5s2Jt/fr1kctKsqoKtplNB9YCD7v7o2a2AkgBn+WestTdf9uYFkWkVtUMfN8FPAK8VlL6hbtvKLOIiLRYNZ+x9wEXAcntE4pIQ3XEXf97kJktAXYW7IqfCIwFPgUWu3vRB6xMJpMdGBjIz/f09MR+vmyV0t46OzsrPjfueusjj0zusMXevXtjx9Oqxf79+0e1/JgxY/LT5XobHh6uuOzWrVtH9dq1OJT+1kajr6+PVCpVdlC0ev8KVwKfufvbZnYbsARYXPqkwhvxJX1jviSV9hZ1M8N33303cl1xB8/iBqcrPXhmZpHPr0XcwbO43goPnpXrLerAYjN/94fS39popNPpirW6gu3uhZ+31wFP1LMeEWmMus5jm9lLZnZqbnYm8E5iHYnIqFVzVDwFPARMBfab2RxGjpI/b2Z/Bb4CKn9J+BC0a9euirXC+36XUzqedamJEydG1j/44IP89L59+4rmIXqc6BUrVkSu+/PPP4+sP/fcc5H1uPPYcctL88QG290zjGyVS72UeDcikghdUioSIAVbJEAKtkiAFGyRACnYIgHS1zZrtGXLlsh63JVntUj6CqoLLrggsj5jxozI+rfffls0X3ql2rZt2+prTBKnLbZIgBRskQAp2CIBUrBFAqRgiwRIwRYJkIItEiCdxz6MHH300ZH10vPUpUpvo1U6r69ttg9tsUUCpGCLBEjBFgmQgi0SIAVbJEAKtkiAFGyRAOk89mFk48aNrW5BmkRbbJEAKdgiAVKwRQKkYIsESMEWCZCCLRIgBVskQDqPfRiZPXt2q1uQJqkq2Gb2IHB+7vm/BN4CVgKdwCfA1e6+r1FNikhtYnfFzeyHwHR3Pxf4CfCvwD3AY+5+PvAXYEFDuxSRmlTzGXsz8NPc9C6gC5gJrMs9th6YlXhnIlK3jtL7VkUxs58xsks+290n5x47DVjp7j8ofG4mk8kODAzk53t6ehgcHEyk6aS1a29J99Xd3R1ZnzZtWtXr2rt3L+PGjSt6bOvWrRWfPzw8XPW6R6tdf5+QbG99fX2kUqmOcrWqD56Z2SXAdcCFwPsFpbIrBooGlEt6gLkktWtvSfcVd/Ds5ZdfjqwXbgTcHTMrqs+cObPisjt27IhvMCHt+vuEZHtLp9MVa1Wd7jKz2cAdwD+4+xfAV2Z28JaXJwNDo21SRJITu8U2s25gKTDL3T/PPbwJuAxYlfvvKw3rUBJz6qmntroFaZJqdsWvAI4HVhfsel0DLDezhcCHwDONaU9E6hEbbHd/EniyTOnHybcjIknQJaUiAVKwRQKkYIsESMEWCZCCLRIgfW3zMPLGG29E1o84Ivrf+dJhdjs6Kl50KC2mLbZIgBRskQAp2CIBUrBFAqRgiwRIwRYJkIItEiCdxz6MvPPOO5H1999/P7Je+n3u0ttqnXbaaRWXbeYdVERbbJEgKdgiAVKwRQKkYIsESMEWCZCCLRIgBVskQDqPLXkPPPBAZH358uWR9fvvv79i7YYbbohctnA4KBk9bbFFAqRgiwRIwRYJkIItEiAFWyRACrZIgBRskQBVdR7bzB4Ezs89/5fAxUAK+Cz3lKXu/tuGdChNs2bNmsj63Llz89Pd3d1s2rSpqD5r1qyKyy5ZsiRy3fPnz4+s79mzJ7IuxaoZ+P6HwHR3P9fMjgP+G/gP4BfuvqHRDYpI7arZYm8G/pib3gV0AZ0N60hERq2age8PAAf3g64DXgYOAIvN7J+BT4HF7r6zYV2KSE06Su9bVYmZXQLcDlwInAl85u5vm9ltwN+6++LC52cymWzh9b89PT0MDg4m1niS2rW3ZvfV2Rm9I1Z4z7POzk4OHDhQVD/22GMrLrtr167Idcf9f5aOGxalXX+fkGxvfX19pFKpsgOoVXvwbDZwB/ATd/8CeK2gvA54otxy8+bNy0/39/cXzbeTdu2t2X1FBRNg9erV+enu7m6++OKLovpZZ51Vcdm4A3MLFy6MrNdy8Kxdf5+QbG/pdLpiLfZ0l5l1A0uBf3T3z3OPvWRmB//5nglE3/5SRJqqmi32FcDxwGozO/jYr4DnzeyvwFdA9LkKOSTs3r07sn755Zfnp5944gkWLVpUVI/62mbpc0vFnQ7T1zprU83BsyeBJ8uUnkm+HRFJgq48EwmQgi0SIAVbJEAKtkiAFGyRACnYIgHS7YelaoXnuQ8cOPD/zntH3WI47vbDkixtsUUCpGCLBEjBFgmQgi0SIAVbJEAKtkiAFGyRAFV9a6RaZTKZxqxYRPIq3RqpYcEWkdbRrrhIgBRskQA1/FpxM3sYOAfIAje5+1uNfs1qmNlM4AXgz7mH/uTuLb+g2cymA2uBh939UTP7HrCSkUEaPgGudvd9bdDXCtpkmKcyQ1C9RRu8ZxV6a8rwWA0NtpnNAP4uNzzQ94GngXMb+Zo1+r27z2l1EweZWRfwCMW3d74HeMzdXzCzB4AFVLjdc5P7gjYY5qnCEFSv0eL3LKK3pgyP1ehd8R8BvwFw93eB75pZ9M2rD2/7gIuAoYLHZjJy73aA9UDlke8ap1xf7WIz8NPc9MEhqGbS+vcMyvfWlOGxGr0rfiKQKZjfkXss+j63zdNnZuuAicDd7v5qK5tx92FguOA2zwBdBbuRnwIntUlf0AbDPFUYgmp2q9+ziN6aMjxWsw+elT3n1iLvA3cDlwDXAP9uZmNb21Ksdnr/VgK3ufvfA28DS1rZTG4IquuAxSWllr9nJb015X1r9BZ7iJEt9EF/w8jBjJZz9+3A87nZD8zsf4GTgXYb9OkrMzva3b9mpL+22B1296qGeWqG0iGozKxt3rN6h8carUZvsX8HzAEwszOAIXf/ssGvWRUzu9LMbslNnwicAGxvbVdlbQIuy01fBrzSwl7y2mWYp3JDUNEm71krh8dq+JVnZvYvwAXAt8DP3X1rQ1+wSmb2HeDXwARgLCOfsV9ucU8p4CFgKrCfkX9orgRWAOOAD4H57r6/Dfp6BLgNyA/z5O6fNrOvXG8/Y2R39n8KHr4GWE4L37OI3n7FyC55Q983XVIqEiBdeSYSIAVbJEAKtkiAFGyRACnYIgFSsEUCpGCLBEjBFgnQ/wG9lH1ZTiHTSQAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"6zrYXjEoCnZG"},"source":["## 브로드캐스팅(broadcasting)\n","- 넘파이에서 다른 형상(shape)끼리 계산 가능\n","\n","- 1차원 텐서\n","\n","![1d](https://numpy.org/doc/1.18/_images/theory.broadcast_1.gif)\n","\n","- 2차원 텐서\n","\n","![2d](https://numpy.org/doc/1.18/_images/theory.broadcast_2.gif)\n","\n","- 더 작은 형상(shape)이 형상이 더 큰 배열에 확장 가능해야함\n","\n","![broadcast](https://numpy.org/doc/1.18/_images/theory.broadcast_3.gif) \n","\n","- (참고) 아래의 경우도 가능\n","\n","![broadcast](https://numpy.org/doc/1.18/_images/theory.broadcast_4.gif)\n","\n","<br /><sub>https://numpy.org/doc/1.18/user/theory.broadcasting.html#array-broadcasting-in-numpy</sub>"]},{"cell_type":"code","metadata":{"id":"CvD1A-YzCnLj","executionInfo":{"status":"ok","timestamp":1601912873707,"user_tz":-540,"elapsed":953,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"1d638995-f110-4a91-9f97-0b89ae0d48f6","colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["a = np.array(10)\n","b = np.array([10,20,30])\n","\n","print(np.dot(a,b))\n","print(a * b)\n"],"execution_count":27,"outputs":[{"output_type":"stream","text":["[100 200 300]\n","[100 200 300]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GBqGnivIBbTz","executionInfo":{"status":"ok","timestamp":1601912938839,"user_tz":-540,"elapsed":920,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"07d7b4db-1553-4349-e85e-29e91655ff59","colab":{"base_uri":"https://localhost:8080/","height":158}},"source":["A= np.array([[1,2],[3,4]])\n","B = np.array([10,20])\n","\n","print('행렬 A \\n', A)\n","print('행렬 B \\n', B)\n","print('행렬 A*B \\n', A*B)\n","# 브뤗캐스팅"],"execution_count":28,"outputs":[{"output_type":"stream","text":["행렬 A \n"," [[1 2]\n"," [3 4]]\n","행렬 B \n"," [10 20]\n","행렬 A*B \n"," [[10 40]\n"," [30 80]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"c0CvqipjCq9-","executionInfo":{"status":"ok","timestamp":1601913141891,"user_tz":-540,"elapsed":662,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"cccf1b57-9e15-401c-f815-4b7dfb07ff70","colab":{"base_uri":"https://localhost:8080/","height":298}},"source":["A = np.array([[[1,1,1],\n","               [2,2,2]],\n","              [[3,3,3],\n","               [4,4,4]]])\n","\n","B = np.array([[10,10,10]])\n","\n","print('행렬 A \\n', A)\n","print('A.shape:', A.shape)\n","print('행렬 B\\n', B)\n","print('B.shape', B.shape)\n","print('A * B \\n', A * B)"],"execution_count":33,"outputs":[{"output_type":"stream","text":["행렬 A \n"," [[[1 1 1]\n","  [2 2 2]]\n","\n"," [[3 3 3]\n","  [4 4 4]]]\n","A.shape: (2, 2, 3)\n","행렬 B\n"," [[10 10 10]]\n","B.shape (1, 3)\n","A * B \n"," [[[10 10 10]\n","  [20 20 20]]\n","\n"," [[30 30 30]\n","  [40 40 40]]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"O3dSdUymCsEh","executionInfo":{"status":"error","timestamp":1601913238166,"user_tz":-540,"elapsed":1028,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"3d25e759-d9c4-4296-c6cd-dc4da6fa8d5d","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["# 브뤗캐스팅이 안되는 예제\n","\n","A = np.array([[1,2,3],[4,5,6]])\n","B = np.array([10,10])\n","\n","print(A*B)\n","# 조합이 안맞구만.."],"execution_count":34,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-34-2018948061f2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mB\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mB\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mValueError\u001b[0m: operands could not be broadcast together with shapes (2,3) (2,) "]}]},{"cell_type":"markdown","metadata":{"id":"oMdQuRrbCvHh"},"source":["## 4, 5차원 텐서\n","- Color Image Datasets(4차원)\n","  - (samples, height, width, channels) ( Keras, Tensorflow )\n","  - (samples, channels, height, width) ( Pytorch )\n","\n","\n","- 동영상(5차원)\n","  1. (samples, frames, height, width, channels)\n","  2. (samples, frames, channels, height, width)\n","  - 예시 1) (4, 300, 1920, 1080, 3) \n","    - 1920x1080 사이즈 3채널의 300프레임 수를 가진 배치가 4개"]},{"cell_type":"markdown","metadata":{"id":"owYBNkzMCxaE"},"source":["## 텐서 크기 변환\n","- reshape로 텐서의 크기 변환 가능\n","- **변환 전의 원소의 개수와 변환 이후의 텐서의 개수가 같아야** 함"]},{"cell_type":"code","metadata":{"id":"s9NyLg5GCxwF","executionInfo":{"status":"ok","timestamp":1601913688716,"user_tz":-540,"elapsed":701,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"7cebda79-ad93-47ee-fc7f-a7afb937858e","colab":{"base_uri":"https://localhost:8080/","height":140}},"source":["A= np.array([[1,2,3],[4,5,6]])\n","print('행렬 A \\n', A)\n","print('A.shape : ', A.shape)\n","print('-------------------')\n","A = A.reshape(6)\n","print('A.shape : ', A.shape)\n","print(A)"],"execution_count":35,"outputs":[{"output_type":"stream","text":["행렬 A \n"," [[1 2 3]\n"," [4 5 6]]\n","A.shape :  (2, 3)\n","-------------------\n","A.shape :  (6,)\n","[1 2 3 4 5 6]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"u1vgBq9fC34Q","executionInfo":{"status":"ok","timestamp":1601913781683,"user_tz":-540,"elapsed":612,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"88075b5f-0c9a-41a0-afbe-121064e3bc6e","colab":{"base_uri":"https://localhost:8080/","height":228}},"source":["B = np.array([[[2,3,4],[2,3,4]],\n","              [[1,1,1],[1,1,1]]])\n","\n","print('행렬 B \\n', B)\n","print('B.shape: ', B.shape)\n","print('-----------------------')\n","B = B.reshape(3,4)\n","print('B.shape:', B.shape)\n","print(B)"],"execution_count":36,"outputs":[{"output_type":"stream","text":["행렬 B \n"," [[[2 3 4]\n","  [2 3 4]]\n","\n"," [[1 1 1]\n","  [1 1 1]]]\n","B.shape:  (2, 2, 3)\n","-----------------------\n","B.shape: (3, 4)\n","[[2 3 4 2]\n"," [3 4 1 1]\n"," [1 1 1 1]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"CHN5jR7vC8hO"},"source":["- -1 을 통해 자동으로 형상을 지정 가능  \n","  원소의 갯수에 맞게 넘파이가 자동으로 형상을 지정  \n","      (2, 2, 3) -> (3, -1)     (O)\n","                -> (2, 1, 6)   (O)\n","                -> (2, -1, -1) (X)\n","                -> (2, 5, -1)  (X) "]},{"cell_type":"code","metadata":{"id":"gYLuemhdC5KG","executionInfo":{"status":"ok","timestamp":1601913857772,"user_tz":-540,"elapsed":929,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"704b3916-9da0-47b9-b615-36da628c3236","colab":{"base_uri":"https://localhost:8080/","height":246}},"source":["B = np.array([[[2,3,4],[2,3,4]],\n","              [[1,1,1],[1,1,1]]])\n","\n","print('행렬 B \\n', B)\n","print('B.shape: ', B.shape)\n","print('-----------------------')\n","B = B.reshape(4,-1)                 # 앞에 약수인 4로 지정해두면 나머지로 자동으로 배열되네\n","print('B.shape:', B.shape)\n","print(B)"],"execution_count":37,"outputs":[{"output_type":"stream","text":["행렬 B \n"," [[[2 3 4]\n","  [2 3 4]]\n","\n"," [[1 1 1]\n","  [1 1 1]]]\n","B.shape:  (2, 2, 3)\n","-----------------------\n","B.shape: (4, 3)\n","[[2 3 4]\n"," [2 3 4]\n"," [1 1 1]\n"," [1 1 1]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"SU5guFPngaLc"},"source":[""],"execution_count":null,"outputs":[]}]}