{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"박성흠 - _7 신경망 학습","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"e1f81f88ee574474817b7f46e78aaa3b":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_508d61f7c6d14e84a4fcb44d6477172e","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_481823404e23459087db545a687faae2","IPY_MODEL_0802cc79aad4488bb87c54d5519f7154"]}},"508d61f7c6d14e84a4fcb44d6477172e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"481823404e23459087db545a687faae2":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_55600dff20e64264ac3d18254bcca1de","_dom_classes":[],"description":"100%","_model_name":"FloatProgressModel","bar_style":"success","max":2,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":2,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_f7861656e7a145c88b24abf6d6d59f84"}},"0802cc79aad4488bb87c54d5519f7154":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_fa65116ab4a24869bb6adfe2a15ec1dc","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 2/2 [02:48&lt;00:00, 84.23s/it]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_d55e9e229ccc4e1d9a6c219dd71059f2"}},"55600dff20e64264ac3d18254bcca1de":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"f7861656e7a145c88b24abf6d6d59f84":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"fa65116ab4a24869bb6adfe2a15ec1dc":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"d55e9e229ccc4e1d9a6c219dd71059f2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"nyjyu4FzUAVw"},"source":["# 신경망 학습"]},{"cell_type":"markdown","metadata":{"id":"VQvNez4qydhL"},"source":["## 단순한 신경망 구현 : Logic Gate"]},{"cell_type":"markdown","metadata":{"id":"-7te43hqyiiJ"},"source":["### 필요한 모듈 import"]},{"cell_type":"code","metadata":{"id":"Qf2F_YbdybBE"},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","plt.style.use('seaborn-whitegrid')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"orUoPmDcymhj"},"source":["### 하이퍼 파라미터(Hyper Parameter)"]},{"cell_type":"code","metadata":{"id":"bOAmMxo0ymDF"},"source":["epochs = 1000\n","lr =0.1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BjmLWgFVysnq"},"source":["### 유틸 함수들(Util Functions)"]},{"cell_type":"code","metadata":{"id":"Y4OMFGrjyq1c"},"source":["def sigmoid(x):\n","    return 1 / (1 + np.exp(-x))\n","\n","def mean_squared_error(pred_y,true_y):\n","    return 0.5 * (np.sum((true_y - pred_y)**2))\n","\n","def cross_entropy_error(pred_y, true_y):\n","    if true_y.ndim == 1:\n","        true_y = true_y.reshape(1,-1)\n","        pred_y = pred_y.reshape(1,-1)\n","\n","    delta = 1e-7 # 무한대로 안가도록 아주 작은값 지정\n","\n","    return -np.sum(true_y * np.log(pred_y + delta))\n","\n","def cross_entropy_error_for_batch(pred_y , true_y):\n","    if true_y.ndim == 1:\n","        true_y = true_y.reshape(1,-1)\n","        pred_y = pred_y.reshape(1,-1)\n","\n","    delta = 1e-7 # 무한대로 안가도록 아주 작은값 지정\n","    batch_size = pred_y.shape[0]\n","\n","    return -np.sum(true_y * np.log(pred_y + delta)) / batch_size\n","\n","def cross_entropy_error_for_bin(pred_y, true_y): #바이너리 형태의 cross entropy일때:\n","    return 0.5 * np.sum((-true_y * np.log(pred_y) - (1-true_y) * np.log(1-pred_y)))\n","\n","def softmax(a):\n","    exp_a = np.exp(a)\n","    sum_exp_a = np.sum(exp_a)\n","    y = exp_a / sum_exp_a\n","\n","    return y\n","\n","def differential(f,x):\n","    eps = 1e-5\n","    diff_value = np.zeros_like(x)\n","\n","    for i in range(x.shape[0]):\n","        temp_val = x[i]\n","\n","        x[i] = temp_val + eps \n","        f_h1 = f(x)\n","\n","        x[i] = temp_val -eps\n","        f_h2 = f(x)\n","\n","        diff_value[i] = (f_h1 - f_h2) / (2 *eps)\n","        x[i] = temp_val\n","\n","    return diff_value\n","\n","# 우리가 사용하는 유틸 만들고"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"h5Z2LTT_y3i5"},"source":["### 신경망"]},{"cell_type":"code","metadata":{"id":"gMTjjYgdy3D8"},"source":["class LogicGateNet():\n","    \n","    def __init__(self):\n","        def weight_init():\n","            np.random.seed(1)\n","            weights = np.random.randn(2)\n","            bias = np.random.rand(1)\n","\n","            return weights, bias        #초기값 만드는거야\n","\n","        self.weights, self.bias = weight_init()\n","    \n","    def predict(self, x):\n","        W = self.weights.reshape(-1,1)\n","        b = self.bias\n","\n","        pred_y = sigmoid(np.dot(x,W) + b)\n","        return pred_y\n","\n","    def loss(self, x, true_y):\n","        pred_y = self.predict(x)\n","        return cross_entropy_error_for_bin(pred_y , true_y)\n","\n","    def get_gradient(self, x, t):\n","        def loss_grad(grad):\n","            return self.loss(x,t)\n","\n","        grad_W = differential(loss_grad, self.weights)\n","        grad_B = differential(loss_grad, self.bias)\n","\n","        return grad_W, grad_B\n","\n","    #logicgate만들엇어"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wbNDoH_3zbGZ"},"source":["### AND Gate"]},{"cell_type":"markdown","metadata":{"id":"2P-ib8_RzHTh"},"source":["#### 모델 생성 및 학습"]},{"cell_type":"code","metadata":{"id":"rRiaACA6zGom","executionInfo":{"status":"ok","timestamp":1602127921255,"user_tz":-540,"elapsed":1031,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"4b7f04ac-f316-48e5-8ea6-998927a45b19","colab":{"base_uri":"https://localhost:8080/"}},"source":["AND = LogicGateNet()\n","\n","X = np.array([[0,0],[0,1],[1,0],[1,1]])\n","Y = np.array([[0],[0],[0],[1]])\n","\n","train_loss_list = list()\n","\n","for i in range(epochs):\n","    grad_W, grad_B = AND.get_gradient(X,Y)\n","\n","    AND.weights -= lr * grad_W\n","    AND.bias -= lr * grad_B\n","\n","    loss = AND.loss(X,Y)\n","    train_loss_list.append(loss)\n","\n","    if i % 100 == 99:\n","        print('epoch : {}, Cost: {}, Weights: {}, Bias:{}'.format(i+1, loss, AND.weights, AND.bias))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["epoch : 100, Cost: 0.6886489498077508, Weights: [1.56426876 0.79168393], Bias:[-2.14871589]\n","epoch : 200, Cost: 0.4946368603067626, Weights: [2.01360719 1.71241131], Bias:[-3.07894028]\n","epoch : 300, Cost: 0.3920165980751678, Weights: [2.42841657 2.29753793], Bias:[-3.79103207]\n","epoch : 400, Cost: 0.3257214374794629, Weights: [2.794852   2.73235738], Bias:[-4.37257095]\n","epoch : 500, Cost: 0.2786360133470194, Weights: [3.11636193 3.08408364], Bias:[-4.86571237]\n","epoch : 600, Cost: 0.24328504683857205, Weights: [3.40015395 3.38235762], Bias:[-5.29433736]\n","epoch : 700, Cost: 0.2157253655246455, Weights: [3.65300561 3.64264217], Bias:[-5.67349792]\n","epoch : 800, Cost: 0.19363244428376314, Weights: [3.88044124 3.87412053], Bias:[-6.01340133]\n","epoch : 900, Cost: 0.175532131279099, Weights: [4.08680123 4.08279091], Bias:[-6.32133891]\n","epoch : 1000, Cost: 0.16043926933305935, Weights: [4.27548114 4.27284863], Bias:[-6.6027234]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"PZoyQv_czT7R"},"source":["#### 테스트"]},{"cell_type":"code","metadata":{"id":"-7CvWgc9zREa","executionInfo":{"status":"ok","timestamp":1602127923780,"user_tz":-540,"elapsed":1053,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"dd0a60b8-e8f9-4945-8039-e50bfc81b1c5","colab":{"base_uri":"https://localhost:8080/"}},"source":["print(AND.predict(X))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[0.00135483]\n"," [0.08867878]\n"," [0.08889176]\n"," [0.87496677]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"HoMXNiXWzts-"},"source":["### OR Gate"]},{"cell_type":"markdown","metadata":{"id":"DZ79pc4jzw3O"},"source":["#### 모델 생성 및 학습"]},{"cell_type":"code","metadata":{"id":"8gnLmAyQzuoL","executionInfo":{"status":"ok","timestamp":1602127925013,"user_tz":-540,"elapsed":1315,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"11c42f66-53e6-4cfe-d051-511cb1c2940d","colab":{"base_uri":"https://localhost:8080/"}},"source":["OR = LogicGateNet()\n","X = np.array([[0,0],[0,1],[1,0],[1,1]])\n","Y_2 = np.array([[0],[1],[1],[1]])\n","\n","trian_loss_list = list()\n","\n","for i in range(epochs):\n","    grad_W, grad_B = OR.get_gradient(X,Y_2)\n","\n","    OR.weights -= lr * grad_W\n","    OR.bias -= lr * grad_B\n","\n","    loss = OR.loss(X ,Y_2)\n","    train_loss_list.append(loss)\n","\n","    if i % 100 == 99:\n","         print('epoch : {}, Cost: {}, Weights: {}, Bias:{}'.format(i+1, loss, OR.weights, OR.bias))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["epoch : 100, Cost: 0.49580923848037245, Weights: [2.45484353 1.40566594], Bias:[-0.14439625]\n","epoch : 200, Cost: 0.3398674231512476, Weights: [2.98631846 2.39448393], Bias:[-0.67661178]\n","epoch : 300, Cost: 0.2573360986184237, Weights: [3.45016595 3.08431266], Bias:[-1.03721585]\n","epoch : 400, Cost: 0.20630142190061632, Weights: [3.85230067 3.60865952], Bias:[-1.30598633]\n","epoch : 500, Cost: 0.1716549922114765, Weights: [4.20195872 4.03000824], Bias:[-1.52060015]\n","epoch : 600, Cost: 0.14665018845489367, Weights: [4.50867681 4.38171478], Bias:[-1.6994397]\n","epoch : 700, Cost: 0.12779768649443757, Weights: [4.78049264 4.68334611], Bias:[-1.8527641]\n","epoch : 800, Cost: 0.11310517185394649, Weights: [5.0237707 4.9472786], Bias:[-1.98691756]\n","epoch : 900, Cost: 0.10135180918369109, Weights: [5.24347159 5.18181684], Bias:[-2.10611973]\n","epoch : 1000, Cost: 0.09174843008614507, Weights: [5.44346811 5.39279833], Bias:[-2.21332947]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jWmEtX_VnLSI"},"source":["#### 테스트"]},{"cell_type":"code","metadata":{"id":"JwPpOs3-z2vU","executionInfo":{"status":"ok","timestamp":1602127925014,"user_tz":-540,"elapsed":864,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"18bf5547-e67a-4cab-983b-a0c2236eaffc","colab":{"base_uri":"https://localhost:8080/"}},"source":["print(OR.predict(X))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[0.09855987]\n"," [0.9600543 ]\n"," [0.96195283]\n"," [0.9998201 ]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JEBhczCIz57Q"},"source":["### NAND Gate"]},{"cell_type":"markdown","metadata":{"id":"TzQaaHKKz8sZ"},"source":["#### 모델 생성 및 학습"]},{"cell_type":"code","metadata":{"id":"h463QUQRz8PS","executionInfo":{"status":"ok","timestamp":1602127927022,"user_tz":-540,"elapsed":1859,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"ea2a3344-b85b-4360-c320-eeb196bd0e25","colab":{"base_uri":"https://localhost:8080/"}},"source":["NAND = LogicGateNet()\n","X = np.array([[0,0],[0,1],[1,0],[1,1]])\n","Y_3 = np.array([[1],[1],[1],[0]])\n","\n","trian_loss_list = list()\n","\n","for i in range(epochs):\n","    grad_W, grad_B = NAND.get_gradient(X,Y_3)\n","\n","    NAND.weights -= lr * grad_W\n","    NAND.bias -= lr * grad_B\n","\n","    loss = NAND.loss(X ,Y_3)\n","    train_loss_list.append(loss)\n","\n","    if i % 100 == 99:\n","         print('epoch : {}, Cost: {}, Weights: {}, Bias:{}'.format(i+1, loss, NAND.weights, NAND.bias))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["epoch : 100, Cost: 0.7911738653764443, Weights: [-0.48972722 -1.25798774], Bias:[1.74566135]\n","epoch : 200, Cost: 0.5430490957875922, Weights: [-1.51545093 -1.80261804], Bias:[2.79151756]\n","epoch : 300, Cost: 0.42125913027366896, Weights: [-2.14614496 -2.26642639], Bias:[3.56506179]\n","epoch : 400, Cost: 0.3456117101528016, Weights: [-2.607325   -2.66303355], Bias:[4.18521187]\n","epoch : 500, Cost: 0.293129860518541, Weights: [-2.97696333 -3.00501941], Bias:[4.70528682]\n","epoch : 600, Cost: 0.2543396786003746, Weights: [-3.28850585 -3.30365261], Bias:[5.1539571]\n","epoch : 700, Cost: 0.22443918596780807, Weights: [-3.55912171 -3.56778782], Bias:[5.54869527]\n","epoch : 800, Cost: 0.20067626330797955, Weights: [-3.7989077  -3.80411461], Bias:[5.90108417]\n","epoch : 900, Cost: 0.1813412551760061, Weights: [-4.01441395 -4.01767547], Bias:[6.21926514]\n","epoch : 1000, Cost: 0.16530944081725432, Weights: [-4.21019696 -4.21231432], Bias:[6.50920952]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jR-rHaTU0Mga"},"source":["#### 테스트"]},{"cell_type":"code","metadata":{"id":"WpzKW6sm0Ghp","executionInfo":{"status":"ok","timestamp":1602127927026,"user_tz":-540,"elapsed":1315,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"5bb65fea-289f-4f6b-9d8e-a912fe9a169a","colab":{"base_uri":"https://localhost:8080/"}},"source":["print(NAND.predict(X))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[0.99851256]\n"," [0.90861957]\n"," [0.90879523]\n"," [0.12861037]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NiTWfSQ60Zl2"},"source":["### XOR Gate"]},{"cell_type":"markdown","metadata":{"id":"hmmL0VIu0bXq"},"source":["#### 모델 생성 및 학습"]},{"cell_type":"code","metadata":{"id":"0CGm0r1M0a9M","executionInfo":{"status":"ok","timestamp":1602127928467,"user_tz":-540,"elapsed":1932,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"b8004374-0505-47e9-dbcc-3a6e2b75b3df","colab":{"base_uri":"https://localhost:8080/"}},"source":["XOR = LogicGateNet()\n","X = np.array([[0,0],[0,1],[1,0],[1,1]])\n","Y_4 = np.array([[0],[1],[1],[0]])\n","\n","trian_loss_list = list()\n","\n","for i in range(epochs):\n","    grad_W, grad_B = XOR.get_gradient(X,Y_4)\n","\n","    XOR.weights -= lr * grad_W\n","    XOR.bias -= lr * grad_B\n","\n","    loss = XOR.loss(X ,Y_4)\n","    train_loss_list.append(loss)\n","\n","    if i % 100 == 99:\n","         print('epoch : {}, Cost: {}, Weights: {}, Bias:{}'.format(i+1, loss, XOR.weights, XOR.bias))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["epoch : 100, Cost: 1.402685224545991, Weights: [ 0.47012771 -0.19931523], Bias:[-0.16097708]\n","epoch : 200, Cost: 1.3879445622846385, Weights: [ 0.1572739  -0.03387161], Bias:[-0.07321056]\n","epoch : 300, Cost: 1.386492030048373, Weights: [0.05525161 0.00089673], Bias:[-0.03330094]\n","epoch : 400, Cost: 1.3863236205351996, Weights: [0.02049628 0.00504503], Bias:[-0.01514784]\n","epoch : 500, Cost: 1.386299474364679, Weights: [0.0080051  0.00361297], Bias:[-0.00689034]\n","epoch : 600, Cost: 1.3862953430687444, Weights: [0.00326661 0.00201812], Bias:[-0.00313421]\n","epoch : 700, Cost: 1.3862945581495083, Weights: [0.00137938 0.00102449], Bias:[-0.00142566]\n","epoch : 800, Cost: 1.38629440139037, Weights: [0.00059716 0.00049628], Bias:[-0.00064849]\n","epoch : 900, Cost: 1.3862943694120307, Weights: [0.00026303 0.00023435], Bias:[-0.00029498]\n","epoch : 1000, Cost: 1.386294362832352, Weights: [0.0001172  0.00010905], Bias:[-0.00013418]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Cy-ktElI0o5P"},"source":["#### 테스트"]},{"cell_type":"code","metadata":{"id":"GWAJAJ_T0oqm","executionInfo":{"status":"ok","timestamp":1602127928468,"user_tz":-540,"elapsed":1084,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"df56d0a5-5bb3-47e4-9c98-9d3ab0ea1148","colab":{"base_uri":"https://localhost:8080/"}},"source":["print(XOR.predict(X))\n","# 음 학습이 안되는구만\n","# 해결하기 위해서 우린 2층 이상의 퍼셉트론을 이용햇지?"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[0.49996646]\n"," [0.49999372]\n"," [0.49999575]\n"," [0.50002302]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VAlq_-6E1nIq"},"source":["#### 2층 신경망으로 XOR 게이트 구현(1)\n","\n","- 얕은 신경망, Shallow Neural Network\n","\n","- 두 논리게이트(NAND, OR)를 통과하고  \n","  AND 게이트로 합쳐서 구현\n","\n","- 06 신경망 구조 참고"]},{"cell_type":"code","metadata":{"id":"mr7nYMG20jTo"},"source":["X = np.array([[0,0], [0,1],[1,0], [1,1]])\n","Y_5 = np.array([[0],[1],[1],[0]])\n","\n","s1 = NAND.predict(X)\n","s2 = OR.predict(X)\n","X_2 = np.array([s1,s2]).T.reshape(-1,2)\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nkTDx8Ah1xHY"},"source":["#### 테스트"]},{"cell_type":"code","metadata":{"id":"LK2iD5A91yWQ","executionInfo":{"status":"ok","timestamp":1602127930270,"user_tz":-540,"elapsed":888,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"6d3f52ba-ad1a-4c7b-e239-341f4eacffee","colab":{"base_uri":"https://localhost:8080/"}},"source":["print(AND.predict(X_2))\n","\n","# NAND랑 OR 합치니까  0 1 1 0 으로 비슷하게 나오네"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[0.12870357]\n"," [0.79966936]\n"," [0.80108545]\n"," [0.14420781]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"i-SK4G262Agn"},"source":["#### 2층 신경망으로 XOR 게이트 구현(2)\n","- 클래스로 구현"]},{"cell_type":"code","metadata":{"id":"8RpnHCRZ1zwr"},"source":["class XORNet():\n","\n","    def __init__(self):\n","        np.random.seed(1)\n","\n","        def weight_init():\n","            params = {}\n","            params['w_1'] = np.random.randn(2)\n","            params['b_1'] = np.random.rand(2)\n","            params['w_2'] = np.random.randn(2)\n","            params['b_2'] = np.random.rand(1)\n","            return params\n","\n","        self.params = weight_init()\n","\n","    def predict(self, x):\n","        W_1, W_2 = self.params['w_1'].reshape(-1,1), self.params['w_2'].reshape(-1,1)\n","        B_1, B_2 = self.params['b_1'], self.params['b_2']\n","\n","        A1 = np.dot(x, W_1) + B_1\n","        Z1 = sigmoid(A1)\n","        A2 = np.dot(Z1,W_2) + B_2\n","        pred_y = sigmoid(A2)\n","\n","        return pred_y\n","\n","    def loss(self, x, true_y):\n","        pred_y =self.predict(x)\n","        return cross_entropy_error_for_bin(pred_y, true_y)\n","\n","    def get_gradient(self, x, t):\n","        def loss_grad(grad):\n","            return self.loss(x,t)\n","\n","        grads = {}\n","        grads['w_1'] = differential(loss_grad, self.params['w_1'])\n","        grads['b_1'] = differential(loss_grad, self.params['b_1'])\n","        grads['w_2'] = differential(loss_grad, self.params['w_2'])\n","        grads['b_2'] = differential(loss_grad, self.params['b_2'])\n","        \n","        return grads"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lplK_x0l2YLh"},"source":["#### 하이퍼 파라미터(Hyper Parameter)\n","- 재조정"]},{"cell_type":"code","metadata":{"id":"qf-3wWSv2b7l"},"source":["lr = 0.3\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lmHKd45d2JbJ"},"source":["#### 모델 생성 및 학습"]},{"cell_type":"code","metadata":{"id":"cQNd3XVd2Gj7","executionInfo":{"status":"ok","timestamp":1602128866010,"user_tz":-540,"elapsed":1542,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"ed7f9f74-fc2f-44f4-ada2-5207840bb402","colab":{"base_uri":"https://localhost:8080/"}},"source":["XOR = XORNet()\n","X = np.array([[0,0], [0,1],[ 1,0], [1,1]])\n","Y_5 = np.array([[0], [1],[1],[0]])\n","\n","train_loss_list = list()\n","\n","for i in range(epochs):\n","    grads = XOR.get_gradient(X, Y_5)\n","\n","    for key in ('w_1', 'b_1', 'w_2', 'b_2'):\n","        XOR.params[key] -= lr * grads[key]\n","\n","    loss = XOR.loss(X, Y_5)\n","    train_loss_list.append(loss)\n","\n","    if i % 100 == 99:\n","        print('Epoch: {}, cost: {}'.format(i+1, loss))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch: 100, cost: 1.3535614442452921\n","Epoch: 200, cost: 1.2827154568264447\n","Epoch: 300, cost: 0.8968907893084717\n","Epoch: 400, cost: 0.33871971414018315\n","Epoch: 500, cost: 0.18121344476789647\n","Epoch: 600, cost: 0.11991186457736537\n","Epoch: 700, cost: 0.08861936864958647\n","Epoch: 800, cost: 0.06992180653218366\n","Epoch: 900, cost: 0.05758041353140311\n","Epoch: 1000, cost: 0.04886093568479621\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"IIV_GsoG2eDs"},"source":["#### 테스트"]},{"cell_type":"code","metadata":{"id":"Dpr0nZhc2Szr","executionInfo":{"status":"ok","timestamp":1602128912569,"user_tz":-540,"elapsed":1078,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"5e3df107-1481-4584-fa88-403395b18b77","colab":{"base_uri":"https://localhost:8080/"}},"source":["print(XOR.predict(X))\n","\n","# 0 1 1 0과 매우 유사하구만"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[0.0217367 ]\n"," [0.96884394]\n"," [0.97816819]\n"," [0.0217794 ]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_1IuDL8R7wrx"},"source":["## 다중 클래스 분류 : MNIST Dataset"]},{"cell_type":"markdown","metadata":{"id":"9CiJ5Gmq9Wpa"},"source":["### 배치 처리\n","- 학습 데이터 전체를 한번에 진행하지 않고  \n","  일부 데이터(샘플)을 확률적으로 구해서 조금씩 나누어 진행\n","\n","- 확률적 경사 하강법(Stochastic Gradient Descent) 또는  \n","  미니 배치 학습법(mini-batch learning)이라고도 부름"]},{"cell_type":"markdown","metadata":{"id":"YUDNWwj49byH"},"source":["#### 신경망 구현 : MNIST "]},{"cell_type":"markdown","metadata":{"id":"WjBRQYlP74GM"},"source":["#### 필요한 모듈 임포트"]},{"cell_type":"code","metadata":{"id":"h0lJbkuW71lm"},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","import time\n","from tqdm.notebook import tqdm"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MDvtEiD77_gu"},"source":["#### 데이터 로드"]},{"cell_type":"code","metadata":{"id":"4WL7zXMl_uo9","executionInfo":{"status":"ok","timestamp":1602129039008,"user_tz":-540,"elapsed":1526,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"b289f927-c25f-404f-a753-c1fbc7a4488a","colab":{"base_uri":"https://localhost:8080/"}},"source":["mnist = tf.keras.datasets.mnist\n","\n","(x_train, y_train), (x_test, y_test) = mnist.load_data()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"e_rNg5Jn8FRA"},"source":["#### 데이터 확인"]},{"cell_type":"code","metadata":{"id":"u4wpsQGA8BOO","executionInfo":{"status":"ok","timestamp":1602129073488,"user_tz":-540,"elapsed":1125,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"bd663655-2c2d-46c1-ad77-77962e90f1ef","colab":{"base_uri":"https://localhost:8080/"}},"source":["print(x_train.shape)\n","print(y_train.shape,'\\n')\n","\n","print(x_test.shape)\n","print(y_test.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(60000, 28, 28)\n","(60000,) \n","\n","(10000, 28, 28)\n","(10000,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"pU7nvkHO8IFR","executionInfo":{"status":"ok","timestamp":1602129103657,"user_tz":-540,"elapsed":1003,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"69320b6a-f114-4322-9b3c-b16791d063e1","colab":{"base_uri":"https://localhost:8080/","height":280}},"source":["img = x_train[0]\n","print(img.shape)\n","\n","plt.imshow(img,cmap = 'gray')\n","plt.show()\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(28, 28)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"WbBA1Kl18KGT","executionInfo":{"status":"ok","timestamp":1602129126975,"user_tz":-540,"elapsed":1004,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"734b0b5e-c646-4808-fe27-98704c416468","colab":{"base_uri":"https://localhost:8080/"}},"source":["y_train[0]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{"tags":[]},"execution_count":60}]},{"cell_type":"markdown","metadata":{"id":"MTFu8i-z8U_C"},"source":["#### 데이터 전처리 (Data Preprocessing)"]},{"cell_type":"code","metadata":{"id":"q76pjKDVftHJ"},"source":["def flatten_for_mnist(x):\n","    temp = np.zeros((x.shape[0], x[0].size))\n","\n","    for idx, data in enumerate(x):\n","        temp[idx, :] = data.flatten()   # 데이터를 flatten해줄게\n","\n","    return temp     # 전체데이터를 flatten해주는 결과\n","\n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vvMWrDOR8Mns","executionInfo":{"status":"ok","timestamp":1602129393970,"user_tz":-540,"elapsed":1688,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"f1e2cdc2-7914-454e-9948-54d6c2b20f43","colab":{"base_uri":"https://localhost:8080/"}},"source":["x_train, x_test = x_train / 255.0 , x_test / 255.0\n","\n","x_train = flatten_for_mnist(x_train)\n","x_test = flatten_for_mnist(x_test)      #기존의 train,test를 다 flatten시킨거\n","\n","print(x_train.shape)\n","print(x_test.shape)\n","\n","y_train_ohe = tf.one_hot(y_train, depth= 10).numpy()\n","y_test_ohe = tf.one_hot(y_test, depth = 10).numpy()\n","\n","print(y_train_ohe.shape)\n","print(y_test_ohe.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(60000, 784)\n","(10000, 784)\n","(60000, 10)\n","(10000, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9LjpWz0dotJs","executionInfo":{"status":"ok","timestamp":1602129445452,"user_tz":-540,"elapsed":1048,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"dc1f1e68-52cf-42ee-f025-e8d538a18f05","colab":{"base_uri":"https://localhost:8080/"}},"source":["print(x_train[0].max(), x_train[0].min())\n","print(y_train_ohe[0])   #label이 5인 값"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0.00392156862745098 0.0\n","[0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"5GUaa92Y9RhY"},"source":["#### 하이퍼 파라미터(Hyper Parameter)"]},{"cell_type":"code","metadata":{"id":"sk3FXXLi9Th5"},"source":["epochs = 2\n","lr = 0.1\n","batch_size = 100\n","train_size = x_train.shape[0]\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5lMJ0h8p8iZl"},"source":["#### 사용되는 함수들(Util Functions)"]},{"cell_type":"code","metadata":{"id":"bSlqZ2Xx8hFn"},"source":["def sigmoid(x):\n","    return 1 / (1 + np.exp(-x))\n","\n","def mean_squared_error(pred_y,true_y):\n","    return 0.5 * (np.sum((true_y - pred_y)**2))\n","\n","def cross_entropy_error(pred_y, true_y):\n","    if true_y.ndim == 1:\n","        true_y = true_y.reshape(1,-1)\n","        pred_y = pred_y.reshape(1,-1)\n","\n","    delta = 1e-7 # 무한대로 안가도록 아주 작은값 지정\n","\n","    return -np.sum(true_y * np.log(pred_y + delta))\n","\n","def cross_entropy_error_for_batch(pred_y , true_y):\n","    if true_y.ndim == 1:\n","        true_y = true_y.reshape(1,-1)\n","        pred_y = pred_y.reshape(1,-1)\n","\n","    delta = 1e-7 # 무한대로 안가도록 아주 작은값 지정\n","    batch_size = pred_y.shape[0]\n","\n","    return -np.sum(true_y * np.log(pred_y + delta)) / batch_size\n","\n","def cross_entropy_error_for_bin(pred_y, true_y): #바이너리 형태의 cross entropy일때:\n","    return 0.5 * np.sum((-true_y * np.log(pred_y) - (1-true_y) * np.log(1-pred_y)))\n","\n","def softmax(a):\n","    exp_a = np.exp(a)\n","    sum_exp_a = np.sum(exp_a)\n","    y = exp_a / sum_exp_a\n","\n","    return y\n","\n","def differential_1d(f,x):\n","    eps = 1e-5\n","    diff_value = np.zeros_like(x)\n","\n","\n","    for i in range(x.shape[0]):\n","        temp_val = x[i]\n","\n","        x[i] = temp_val + eps \n","        f_h1 = f(x)\n","\n","        x[i] = temp_val -eps\n","        f_h2 = f(x)\n","\n","        diff_value[i] = (f_h1 - f_h2) / (2 *eps)\n","        x[i] = temp_val\n","\n","    return diff_value\n","\n","\n","def differential_2d(f,X):   #2d니까 big x로\n","    if X.ndim == 1:\n","        return differential_1d(f,X)\n","    \n","    else:\n","        grad = np.zeros_like(X)\n","\n","        for idx, x in enumerate(X):\n","            grad[idx] = differential_1d(f,x)\n","\n","    return grad"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sSoV9fyj8_u7"},"source":["#### 2층 신경망으로 구현"]},{"cell_type":"code","metadata":{"id":"XBObD5Fw89HI"},"source":["class MyModel():\n","\n","    def __init__(self):\n","\n","        def weight_init(input_nodes, hidden_nodes, output_units):\n","            np.random.seed(777)\n","\n","            params = {}\n","            params['w_1'] = 0.01 * np.random.randn(input_nodes, hidden_nodes)\n","            params['b_1'] = np.zeros(hidden_nodes)\n","            params['w_2'] = 0.01 * np.random.randn(hidden_nodes, output_units)\n","            params['b_2'] = np.zeros(output_units)\n","            return params\n","\n","        self.params = weight_init(784, 64, 10)  # flatten한 784에, hidden은 64, output은 10\n","\n","    def predict(self, x):\n","        W_1, W_2 = self.params['w_1'], self.params['w_2']\n","        B_1, B_2 = self.params['b_1'], self.params['b_2']\n","\n","        A1 = np.dot(x, W_1) + B_1\n","        Z1 = sigmoid(A1)\n","\n","        A2 = np.dot(Z1,W_2) + B_2\n","        pred_y = softmax(A2)\n","\n","        return pred_y\n","\n","    def loss(self, x, true_y):\n","        pred_y =self.predict(x)\n","        return cross_entropy_error_for_bin(pred_y, true_y)\n","\n","    def accuracy(self, x, true_y):\n","        pred_y = self.predict(x)\n","        y_argmax = np.argmax(pred_y , axis = 1)\n","        t_argmax = np.argmax(true_y , axis = 1)\n","\n","        accuracy = np.sum(y_argmax == t_argmax) / float(x.shape[0])\n","\n","        return accuracy\n","\n","    def get_gradient(self, x, t):\n","        def loss_grad(grad):\n","            return self.loss(x,t)\n","\n","        grads = {}\n","        grads['w_1'] = differential_2d(loss_grad, self.params['w_1'])\n","        grads['b_1'] = differential_2d(loss_grad, self.params['b_1'])\n","        grads['w_2'] = differential_2d(loss_grad, self.params['w_2'])\n","        grads['b_2'] = differential_2d(loss_grad, self.params['b_2'])\n","        \n","        return grads"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"maKNIlK-xJ5k"},"source":["#### 모델 생성 및 학습\n","- 시간 많이 소요"]},{"cell_type":"code","metadata":{"id":"XSEARgNIop8t","executionInfo":{"status":"ok","timestamp":1602131287616,"user_tz":-540,"elapsed":169493,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"8189648c-8b33-437e-cb14-e6751b7d7168","colab":{"base_uri":"https://localhost:8080/","height":120,"referenced_widgets":["e1f81f88ee574474817b7f46e78aaa3b","508d61f7c6d14e84a4fcb44d6477172e","481823404e23459087db545a687faae2","0802cc79aad4488bb87c54d5519f7154","55600dff20e64264ac3d18254bcca1de","f7861656e7a145c88b24abf6d6d59f84","fa65116ab4a24869bb6adfe2a15ec1dc","d55e9e229ccc4e1d9a6c219dd71059f2"]}},"source":["model = MyModel()\n","\n","train_loss_list = list()\n","train_acc_list = list()\n","test_acc_list = list()\n","iter_per_epoch = max(train_size / batch_size, 1)\n","\n","start_time = time.time()\n","for i in tqdm(range(epochs)):\n","\n","    batch_idx = np.random.choice(train_size, batch_size)\n","    x_batch = x_train[batch_idx]\n","    y_batch = y_train_ohe[batch_idx]\n","\n","    grads = model.get_gradient(x_batch, y_batch)\n","\n","    for key in grads.keys():\n","        model.params[key] -= lr * grads[key]\n","\n","    loss = model.loss(x_batch, y_batch)\n","    train_loss_list.append(loss)\n","\n","    train_accuracy = model.accuracy(x_train, y_train_ohe)\n","    test_accuracy = model.accuracy(x_test,y_test_ohe)\n","    train_acc_list.append(train_accuracy)\n","    test_acc_list.append(test_accuracy)\n","\n","    print('epoch: {}, cost: {}, train accuracy: test acuuracy: {}'.format(i+1, loss, train_accuracy, test_accuracy))\n","\n","end_time = time.time()\n","print('총 학습 소요시간 : {:.3f}s'.format(end_time -start_time))\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e1f81f88ee574474817b7f46e78aaa3b","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=2.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["epoch: 1, cost: 467.18857264464197, train accuracy: test acuuracy: 0.10441666666666667\n","epoch: 2, cost: 752.8102565880789, train accuracy: test acuuracy: 0.09751666666666667\n","\n","총 학습 소요시간 : 168.458s\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"b7nL8f20x4zl"},"source":["### 모델의 결과\n","- 모델은 학습이 잘 될 수도, 잘 안될 수도 있음\n","\n","- 만약, 학습이 잘 되지 않았다면,  \n","  학습이 잘 되기 위해서 어떠한 조치를 취해야 하는가?\n","  - 다양한 학습관련 기술이 존재"]}]}