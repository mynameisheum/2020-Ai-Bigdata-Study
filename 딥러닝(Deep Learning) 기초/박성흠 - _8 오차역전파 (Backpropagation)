{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"박성흠 - _8 오차역전파 (Backpropagation)","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"S9Db_VsP_m1S"},"source":["## 오차역전파 (Backpropagation)\n"]},{"cell_type":"markdown","metadata":{"id":"8Vdi2PAG_3lW"},"source":["### 오차역전파 알고리즘\n","- 학습 데이터로 정방향(forward) 연산을 통해 손실함수 값(loss)을 구함\n","\n","- 각 layer별로 역전파학습을 위해 중간값을 저장\n","\n","- 손실함수를 학습 파라미터(가중치, 편향)로 미분하여  \n","  마지막 layer로부터 앞으로 하나씩 연쇄법칙을 이용하여 미분\n","  각 layer를 통과할 때마다 저장된 값을 이용\n","\n","- 오류(error)를 전달하면서 학습 파라미터를 조금씩 갱신\n"]},{"cell_type":"markdown","metadata":{"id":"-o545ezeUuSB"},"source":["### 오차역전파 학습의 특징\n","- 손실함수를 통한 평가를 한 번만 하고, 연쇄법칙을 이용한 미분을 활용하기 때문에  \n","  학습 소요시간이 매우 단축!\n","\n","- 미분을 위한 중간값을 모두 저장하기 때문에 메모리를 많이 사용\n"]},{"cell_type":"markdown","metadata":{"id":"CFoTt-ds_w8C"},"source":["### 신경망 학습에 있어서 미분가능의 중요성\n","- 경사하강법(Gradient Descent)에서 손실 함수(cost function)의 최소값,  \n","  즉, 최적값을 찾기 위한 방법으로 미분을 활용\n","\n","- 미분을 통해 손실 함수의 학습 매개변수(trainable parameter)를 갱신하여  \n","  모델의 가중치의 최적값을 찾는 과정\n","\n","![](https://i.pinimg.com/originals/5d/13/20/5d1320c7b672710834e63b95a7c1037b.png)\n","\n","<sub>출처: https://www.pinterest.co.kr/pin/424816177350692379/</sub>"]},{"cell_type":"markdown","metadata":{"id":"ilYRMqLeQf6Z"},"source":["### 합성함수의 미분 (연쇄법칙, chain rule)\n","\n","## $\\qquad \\frac{d}{dx} [f(g(x))] = f^\\prime(g(x))g^\\prime(x)$  \n"," \n","\n","- 여러 개 연속으로 사용가능  \n","  ## $ \\quad \\frac{\\partial f}{\\partial x} = \\frac{\\partial f}{\\partial u} \\times \\frac{\\partial u}{\\partial m} \\times \\frac{\\partial m}{\\partial n} \\times \\ ... \\ \\frac{\\partial l}{\\partial k} \\times \\frac{\\partial k}{\\partial g} \\times \\frac{\\partial g}{\\partial x} \n","  $\n","- 각각에 대해 편미분 적용가능\n","\n","![](https://cdn-media-1.freecodecamp.org/images/1*_KMMFvRP5X9kC59brI0ykw.png)\n","<sub>출처: https://www.freecodecamp.org/news/demystifying-gradient-descent-and-backpropagation-via-logistic-regression-based-image-classification-9b5526c2ed46/</sub>\n","\n","- **오차역전파의 직관적 이해**\n","  - 학습을 진행하면서, 즉 손실함수의 최소값(minimum)을 찾아가는 과정에서 가중치 또는 편향의 변화에 따라 얼마나 영향을 받는지 알 수 있음\n","\n"]},{"cell_type":"markdown","metadata":{"id":"6NLF8CXiQkuL"},"source":["#### 합성함수 미분(chain rule) 예제\n","\n","![](https://miro.medium.com/max/1000/1*azqHvbrNsZ8AIZ7H75tbIQ.jpeg)\n","\n","<sub>출처: https://medium.com/spidernitt/breaking-down-neural-networks-an-intuitive-approach-to-backpropagation-3b2ff958794c</sub>\n","\n","  #### $\\quad a=-1, \\ b=3, \\ c=4$,\n","  #### $\\quad x = a + b, \\ y = b + c, \\ f = x * y \\ 일 때$    \n","\n","\n","\n","  ### $\\quad \\begin{matrix}\\frac{\\partial f}{\\partial x} &=& y\\ + \\ x \\ \\frac{\\partial y}{\\partial x} \\\\\n","  &=& (b \\ + \\ c) \\ + \\ (a \\ +\\ b)\\ \\times \\ 0 \\\\\n","  &=& 7 \\end{matrix}$\n","\n","  ### $\\quad \\begin{matrix}\\frac{\\partial f}{\\partial y} &=& x\\ + \\ \\frac{\\partial x}{\\partial y} \\ y \\\\\n","  &=& (a \\ + \\ b) \\ + \\ 0 \\times (b \\ +\\ c) \\\\\n","  &=& 2 \\end{matrix}$\n","\n","   <br>\n","\n","  ### $ \\quad \\begin{matrix} \\frac{\\partial x}{\\partial a} &=& 1 \\ + \\ a \\ \\frac{\\partial b}{\\partial a} \\\\\n","  &=& 1 \\end{matrix} $\n","  ### $ \\quad \\begin{matrix} \\frac{\\partial y}{\\partial c} &=& \\frac{\\partial b}{\\partial c}\\ + 1 \\\\\n","   &=& 1 \\end{matrix} $\n","  \n","  <br>\n","\n","  ### $ \\quad \\begin{matrix} \\frac{\\partial f}{\\partial a} &=& \\frac{\\partial f}{\\partial x} \\times \\frac{\\partial x}{\\partial a} \\\\\n","  &=& y \\times 1 \\\\ \n","  &=& 7 \\times 1 = 7 \\\\\n","  &=& 7  \\end{matrix} $\n","    \n","  ### $ \\quad \\begin{matrix} \\frac{\\partial f}{\\partial b}\\ \n","  &=& \\frac{\\partial x}{\\partial b} \\ y \\ + \\ x \\ \\frac{\\partial y}{\\partial b}  \\\\\n","  &=& 1 \\times 7 + 2 \\times 1  \\\\\n","  &=& 9 \\end{matrix} $\n","  \n","\n","  \n","  "]},{"cell_type":"markdown","metadata":{"id":"2PgmdJN0Qtdw"},"source":["### 덧셈, 곱셈 계층의 역전파\n","- 위 예제를 통해 아래 사항을 알 수 있음\n","\n","  #### 1. $\\quad z = x + y$ 일 때,\n","  ## $\\frac{\\partial z}{\\partial x} = 1, \\frac{\\partial z}{\\partial y} = 1 $\n","\n","  #### 2. $\\quad t = xy$ 일 때,\n","  ## $\\frac{\\partial t}{\\partial x} = y, \\frac{\\partial t}{\\partial y} = x$\n"]},{"cell_type":"code","metadata":{"id":"hShSxvW5WMqi","executionInfo":{"status":"ok","timestamp":1602222581614,"user_tz":-540,"elapsed":1766,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["class Mul():\n","\n","    def __init__(self):\n","        self.x = None\n","        self.y = None\n","\n","    def forward(self,x,y):\n","        self.x =x\n","        self.y = y\n","        result = x *y\n","        return result\n","\n","    def backward(self,dresult):\n","        dx = dresult * self.y\n","        dy = dresult * self.x\n","        return dx, dy"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"1bovOx6UQvLP","executionInfo":{"status":"ok","timestamp":1602222768677,"user_tz":-540,"elapsed":1348,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["class Add():\n","    \n","    def __init__(self):\n","        self.x = None\n","        self.y = None\n","\n","    def forward(self,x,y):\n","        self.x = x\n","        self.y = y\n","        result =  x+y\n","        return result\n","\n","    def backward(self,dresult):\n","        dx = dresult * 1\n","        dy = dresult * 1\n","        return dx,dy"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"e3RawqlUQwp0","executionInfo":{"status":"ok","timestamp":1602222768679,"user_tz":-540,"elapsed":1039,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["a,b,c = -1,3,4\n","x = Add()\n","y = Add()\n","f = Mul()"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"soyk-HWiSnwh","executionInfo":{"status":"ok","timestamp":1602222815342,"user_tz":-540,"elapsed":1123,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"e09a4f04-0fef-4220-d26b-edaef88e4bac","colab":{"base_uri":"https://localhost:8080/","height":70}},"source":["x_result = x.forward(a,b)\n","y_result = y.forward(b,c)\n","\n","print(x_result)\n","print(y_result)\n","print(f.forward(x_result, y_result))\n","\n","# forward연산이니까 단순히 더하기 곱하기"],"execution_count":6,"outputs":[{"output_type":"stream","text":["2\n","7\n","14\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FhPPrFIqSpq1","executionInfo":{"status":"ok","timestamp":1602222932079,"user_tz":-540,"elapsed":1024,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"214ce493-2ae3-4a81-db10-01d6bcb3ac64","colab":{"base_uri":"https://localhost:8080/","height":87}},"source":["dresult = 1\n","dx_mul, dy_mul = f.backward(dresult)\n","\n","da_add, db_add_1 = x.backward(dx_mul)\n","db_add_2, dc_add = y.backward(dy_mul)\n","\n","print(dx_mul, dy_mul)\n","print(da_add)\n","print(db_add_1 + db_add_2)\n","print(dc_add)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["7 2\n","7\n","9\n","2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dMfl0J1uWgiY"},"source":["![](https://miro.medium.com/max/2000/1*U3mVDYuvnaLhJzIFw_d5qQ.png)\n","<sub>출처: https://medium.com/spidernitt/breaking-down-neural-networks-an-intuitive-approach-to-backpropagation-3b2ff958794c</sub>"]},{"cell_type":"markdown","metadata":{"id":"byODNRUF5fbv"},"source":["### 활성화 함수(Activation)에서의 역전파"]},{"cell_type":"markdown","metadata":{"id":"OkRurUgm5hqn"},"source":["#### 시그모이드(Sigmoid) 함수\n","\n","![](https://media.geeksforgeeks.org/wp-content/uploads/20190911181329/Screenshot-2019-09-11-18.05.46.png)\n","\n","<sub>출처: https://www.geeksforgeeks.org/implement-sigmoid-function-using-numpy/</sub>\n","\n","- 수식 \n","  # $\\quad y = \\frac{1}{1 + e^{-x}} $일 때,\n","\n","  ## $\\quad \\begin{matrix}y' &=& (\\frac{1}{1 + e^{-x}})' \\\\\n","  &=& \\frac{-1}{(1 + e^{-x})^2}\\ \\times \\ (-e^{-x}) \\\\\n","  &=& \\frac{1}{1 + e^{-x}} \\ \\times \\ \\frac{e^{-x}}{1 + e^{-x}} \\\\\n","  &=& \\frac{1}{1 + e^{-x}} \\ \\times \\ (1 - \\frac{1}{1 + e^{-x}}) \\\\\n","  &=& y\\ (1\\ - \\ y)\n","  \\end{matrix}$"]},{"cell_type":"code","metadata":{"id":"DNWIw7ElVhLK","executionInfo":{"status":"ok","timestamp":1602223142937,"user_tz":-540,"elapsed":1207,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["class Sigmoid():\n","\n","    def __init__(self):\n","        self.out = None\n","\n","    def forward(self, x):\n","        out = 1 / (1 + np.exp(-x))\n","        return out\n","    \n","    def backward(self,dout):\n","        dx = dout * (1.0 - self.out)* self.dout\n","        return dx"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QWZ247xo5mtv"},"source":["#### ReLU 함수\n","\n","![](https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2018/10/Line-Plot-of-Rectified-Linear-Activation-for-Negative-and-Positive-Inputs.png)\n","\n","<sub>출처: https://machinelearningmastery.com/rectified-linear-activation-function-for-deep-learning-neural-networks/</sub>\n","\n","\n","- 수식  \n","\n","  ### $\\qquad y=\n","  \\begin{cases}\n","  x & (x \\ge 0)  \\\\\n","  0 & (x < 0)\n","  \\end{cases}$ 일 때,\n","\n","  <br>\n","\n","  ### $\\qquad \\frac{\\partial y}{\\partial x}=\n","  \\begin{cases}\n","  1 & (x \\ge 0)  \\\\\n","  0 & (x < 0)\n","  \\end{cases}$"]},{"cell_type":"code","metadata":{"id":"hHcPmAzh5nOZ","executionInfo":{"status":"ok","timestamp":1602223241652,"user_tz":-540,"elapsed":1175,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["class ReLU():\n","\n","    def __init__(self):\n","        self.out = None\n","\n","    def forward(self,x):\n","        self.mask = (x<0)\n","        out = x.copy()\n","        out[x<0] = 0\n","        return out\n","\n","    def backward(self,dout):\n","        dout[self.mask] = 0\n","        dx = dout\n","        return dx"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MH_kQzedJFfw"},"source":["### 행렬 연산에 대한 역전파\n","\n","# $\\qquad Y = X \\bullet W + B$"]},{"cell_type":"markdown","metadata":{"id":"W-SedVrpJILw"},"source":["#### 순전파(forward)\n","  \n","  - 형상(shape)을 맞춰줘야함\n","  - 앞서 봤던 곱셈, 덧셈 계층을 합친 형태"]},{"cell_type":"code","metadata":{"id":"QKIO7EzSJGD1","executionInfo":{"status":"ok","timestamp":1602223339061,"user_tz":-540,"elapsed":1391,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"49ea10da-56f8-4a56-fe3e-5b2543b3dbaa","colab":{"base_uri":"https://localhost:8080/","height":70}},"source":["import numpy as np\n","X = np.random.rand(3)\n","W = np.random.rand(3,2)\n","B = np.random.rand(2)\n","\n","print(X.shape)\n","print(W.shape)\n","print(B.shape)\n"],"execution_count":13,"outputs":[{"output_type":"stream","text":["(3,)\n","(3, 2)\n","(2,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Tqvl76fFJNfU","executionInfo":{"status":"ok","timestamp":1602223443823,"user_tz":-540,"elapsed":631,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"e7937ea1-7fcb-4c06-8e13-f93a4aa00e36","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["Y = np.dot(X,W) + B\n","print(Y.shape)\n","# 지금은 shape이 맞는거고"],"execution_count":14,"outputs":[{"output_type":"stream","text":["(2,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vTjJIvg9JPMV","executionInfo":{"status":"ok","timestamp":1602223833637,"user_tz":-540,"elapsed":999,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"b2059332-d18c-4689-b736-9634fd3c1900","colab":{"base_uri":"https://localhost:8080/","height":70}},"source":["# shape이 안멪게 만들면 어케 될까\n","X = np.random.rand(3)\n","W = np.random.rand(2,2)\n","B = np.random.rand(2)\n","\n","print(X.shape)\n","print(W.shape)\n","print(B.shape)\n"],"execution_count":15,"outputs":[{"output_type":"stream","text":["(3,)\n","(2, 2)\n","(2,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QnB0hE6YJQuD","executionInfo":{"status":"error","timestamp":1602223838893,"user_tz":-540,"elapsed":1111,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"ae31ff48-f7b5-457b-e301-11e263701097","colab":{"base_uri":"https://localhost:8080/","height":222}},"source":["Y = np.dot(X,W) + B\n","print(Y.shape)\n","\n","# 역시 오류가 나는구만"],"execution_count":16,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-23bc31c4e306>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mY\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mW\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mB\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mY\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mdot\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: shapes (3,) and (2,2) not aligned: 3 (dim 0) != 2 (dim 0)"]}]},{"cell_type":"markdown","metadata":{"id":"04GHZHAiJUGl"},"source":["#### 역전파(1)\n","\n","##  $\\  Y = X \\bullet W$\n","- $X :\\ \\ (2,\\ )$\n","\n","- $W :\\ \\ (2,\\ 3)$\n","\n","- $X \\bullet W :\\ \\ (3,\\ )$\n","\n","- $\\frac{\\partial L}{\\partial Y} :\\ \\ (3,\\ )$\n","\n","- $\\frac{\\partial L}{\\partial X} = \\frac{\\partial L}{\\partial Y}\\bullet W^T ,\\ (2,\\ )$\n","\n","- $\\frac{\\partial L}{\\partial W} = X^T \\bullet \\frac{\\partial L}{\\partial Y} ,\\ (2,\\ 3)$\n","\n"]},{"cell_type":"code","metadata":{"id":"DCruMHCGJSHK","executionInfo":{"status":"ok","timestamp":1602224029408,"user_tz":-540,"elapsed":1033,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"b3be7fb2-8e02-4ac1-ecc8-31ddc67ee030","colab":{"base_uri":"https://localhost:8080/","height":140}},"source":["X = np.random.randn(2)\n","W = np.random.randn(2,3)\n","Y = np.dot(X,W)\n","\n","print('x\\n {}'.format(X))\n","print('w\\n {}'.format(W))\n","print('y\\n {}'.format(Y))\n","# 이건 forward고"],"execution_count":19,"outputs":[{"output_type":"stream","text":["x\n"," [ 0.11287117 -0.29045473]\n","w\n"," [[-0.06912428  0.25862468 -0.39455069]\n"," [-0.41700658 -1.05875777  1.66437378]]\n","y\n"," [ 0.1133194   0.33671248 -0.52795864]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TEvyFXedJWC7","executionInfo":{"status":"ok","timestamp":1602224164510,"user_tz":-540,"elapsed":1091,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"99e35a15-03ba-4fe4-98a3-ed6449fd12d4","colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["dL_dY = np.random.randn(3)\n","dL_dX = np.dot(dL_dY, W.T)\n","dL_dW = np.dot(X.reshape(-1,1), dL_dY.reshape(1,-1))\n","\n","print('dL_dY\\n {}'.format(dL_dY))\n","print('dL_dx\\n {}'.format(dL_dX))\n","print('dL_dw\\n {}'.format(dL_dX))"],"execution_count":20,"outputs":[{"output_type":"stream","text":["dL_dY\n"," [ 0.97020777 -0.49430016  0.14114769]\n","dL_dx\n"," [-0.25059305  0.35368362]\n","dL_dw\n"," [-0.25059305  0.35368362]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"uuOVqySWJauS"},"source":["#### 역전파(2)\n","\n","## $\\ (2)\\  Y = X \\bullet W + B$\n","- $X, W$는 위와 동일\n","\n","- $B: \\ (3, )$\n","\n","- $\\frac{\\partial L}{\\partial B} = \\frac{\\partial L}{\\partial Y}, \\ (3,\\ )$"]},{"cell_type":"code","metadata":{"id":"D_Jb9sY8JYGB","executionInfo":{"status":"ok","timestamp":1602224260509,"user_tz":-540,"elapsed":1100,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"02177d2e-b6f7-4e9e-922c-adc81bea463a","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# 순방향\n","X = np.random.randn(2)\n","W = np.random.randn(2,3)\n","B = np.random.randn(3)\n","Y = np.dot(X,W )+ B\n","print(Y)"],"execution_count":21,"outputs":[{"output_type":"stream","text":["[-1.20373026 -1.10125859  1.20663945]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"frdvKz8oJcoZ","executionInfo":{"status":"ok","timestamp":1602224458266,"user_tz":-540,"elapsed":1124,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"ce7d5aed-6e1c-46aa-aa2f-615f9cae297c","colab":{"base_uri":"https://localhost:8080/","height":175}},"source":["#역전파\n","dL_dY = np.random.rand(3)\n","dL_dX = np.dot(dL_dY, W.T)\n","dL_dW = np.dot(X.reshape(-1,1), dL_dY.reshape(1,-1))\n","dL_dB = dL_dY\n","\n","print('dL_dY\\n{}'.format(dL_dY))\n","print('dL_dx\\n{}'.format(dL_dX))\n","print('dL_dw\\n{}'.format(dL_dW))\n","print('dL_db\\n{}'.format(dL_dB))"],"execution_count":24,"outputs":[{"output_type":"stream","text":["dL_dY\n","[0.77228214 0.07373706 0.00295362]\n","dL_dx\n","[-1.71979594 -0.2745045 ]\n","dL_dw\n","[[-0.03291913 -0.0031431  -0.0001259 ]\n"," [-0.08223421 -0.00785168 -0.00031451]]\n","dL_db\n","[0.77228214 0.07373706 0.00295362]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"0FrBSUsRJgFl"},"source":["#### 배치용 행렬 내적 계층\n","- N개의 데이터에 대해,  \n","# $\\qquad Y = X \\bullet W + B$\n","\n","  - $X : \\quad  (N,\\ 3)$\n","\n","  - $W : \\quad  (3,\\ 2)$\n","\n","  - $B : \\quad  (2,\\ )$\n","  "]},{"cell_type":"code","metadata":{"id":"AoWx5fDnJd-2","executionInfo":{"status":"ok","timestamp":1602224976957,"user_tz":-540,"elapsed":1085,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"c724110f-ccd7-4dc9-b060-da22e2d64878","colab":{"base_uri":"https://localhost:8080/","height":70}},"source":["X = np.random.rand(4,3)\n","W = np.random.rand(3,2)\n","B = np.random.rand(2)\n","\n","print(X.shape)\n","print(W.shape)\n","print(B.shape)\n"],"execution_count":25,"outputs":[{"output_type":"stream","text":["(4, 3)\n","(3, 2)\n","(2,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EqhSX54BJmPQ","executionInfo":{"status":"ok","timestamp":1602225017242,"user_tz":-540,"elapsed":1177,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"4ccc3558-e45e-4d83-b6bb-9325d0ab4478","colab":{"base_uri":"https://localhost:8080/","height":210}},"source":["print('X\\n{}'.format(X))\n","print('w\\n{}'.format(W))\n","print('b\\n{}'.format(B))"],"execution_count":27,"outputs":[{"output_type":"stream","text":["X\n","[[0.13396388 0.45944717 0.74809576]\n"," [0.76117562 0.65335053 0.56052927]\n"," [0.57916151 0.67274513 0.13593734]\n"," [0.9655811  0.4857537  0.76501558]]\n","w\n","[[0.85185949 0.92943055]\n"," [0.39453044 0.37787384]\n"," [0.23646678 0.86922574]]\n","b\n","[0.93659165 0.44461764]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_1IOOfhuJqF-","executionInfo":{"status":"ok","timestamp":1602225083740,"user_tz":-540,"elapsed":1102,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"510ab606-1852-42ca-ae53-dd6804e5209c","colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["Y = np.dot(X,W) +B\n","\n","print('Y\\n {}'.format(Y))\n","print('Y.shape : ',Y.shape)"],"execution_count":29,"outputs":[{"output_type":"stream","text":["Y\n"," [[1.40887574 1.39300493]\n"," [1.97531954 1.88618806]\n"," [1.72751897 1.35528107]\n"," [2.13167645 2.19058306]]\n","Y.shape :  (4, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TOKsN2NHJrqT","executionInfo":{"status":"ok","timestamp":1602225203153,"user_tz":-540,"elapsed":1083,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"8302e8db-17ae-46b4-afea-db7b2e73fd88","colab":{"base_uri":"https://localhost:8080/","height":298}},"source":["# 역전파 해볼게\n","dL_dY = np.random.randn(4,2)\n","dL_dX = np.dot(dL_dY, W.T)\n","dL_dW = np.dot(X.T, dL_dY)\n","dL_dB = np.sum(dL_dY, axis = 0)\n","\n","print('dL_dY\\n{}'.format(dL_dY))\n","print('dL_dx\\n{}'.format(dL_dX))\n","print('dL_dw\\n{}'.format(dL_dW))\n","print('dL_db\\n{}'.format(dL_dB))"],"execution_count":31,"outputs":[{"output_type":"stream","text":["dL_dY\n","[[-0.48521292 -0.71637935]\n"," [ 1.53131139 -2.16976274]\n"," [-0.30685899  2.38252243]\n"," [-0.46809996  0.91970619]]\n","dL_dx\n","[[-1.07915807 -0.46213228 -0.7374321 ]\n"," [-0.71218164 -0.21574762 -1.52390937]\n"," [ 1.95298838  0.77922769  1.99838788]\n"," [ 0.45604764  0.16285323  0.68874221]]\n","dL_dw\n","[[ 0.4708865   0.52037675]\n"," [ 0.34373422  0.30282696]\n"," [ 0.09554177 -0.72467255]]\n","dL_db\n","[0.27113953 0.41608653]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YjIYrXGaJtEz","executionInfo":{"status":"ok","timestamp":1602225403913,"user_tz":-540,"elapsed":1342,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["class Layer():\n","\n","    def __init__(self):\n","        self.W = np.random.randn(3,2)\n","        self.b = np.random.randn(2)\n","        self.x = None\n","        self.dW = None\n","        self.db = None\n","\n","    def forward(self,x):\n","        self.x = x\n","        out = np.dot(x, self.W) + self.b\n","        return out\n","\n","    def backward(self, dout):\n","        dx = np.dot(dout, self.W.T)\n","        self.dw = np.dot(self.x.T, dout)\n","        self.db = np.sum(dout,axis = 0)\n","        return dx\n"],"execution_count":32,"outputs":[]},{"cell_type":"code","metadata":{"id":"twG43EylJvC-","executionInfo":{"status":"ok","timestamp":1602225424808,"user_tz":-540,"elapsed":1108,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["np.random.seed(111)\n","\n","layer = Layer()\n"],"execution_count":33,"outputs":[]},{"cell_type":"code","metadata":{"id":"CrCDxHw5Jw3S","executionInfo":{"status":"ok","timestamp":1602225456786,"user_tz":-540,"elapsed":1468,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"40890000-9689-4ac0-b4e9-b07373054cc5","colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["#순전파부터 해봄\n","\n","X = np.random.rand(2,3)\n","Y = layer.forward(X)\n","\n","print(X)"],"execution_count":34,"outputs":[{"output_type":"stream","text":["[[0.23868214 0.33765619 0.99071246]\n"," [0.23772645 0.08119266 0.66960024]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"boKm8OIgJyJy","executionInfo":{"status":"ok","timestamp":1602225510887,"user_tz":-540,"elapsed":1160,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"5c7abb62-6612-4328-946d-3032525c7544","colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["# 역전파 해봄\n","\n","dout = np.random.rand(2,2)\n","dout_dx = layer.backward(dout)\n","\n","print(dout_dx)"],"execution_count":35,"outputs":[{"output_type":"stream","text":["[[-0.59898814  0.83225859 -0.61525238]\n"," [-0.48312871  0.65565961 -0.42154775]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Bz-0zFPpJ3Jz"},"source":["### MNIST 분류 with 역전파\n"]},{"cell_type":"markdown","metadata":{"id":"eW3InPxBJ6qo"},"source":["#### Modules Import"]},{"cell_type":"code","metadata":{"id":"ZKtAhkm4J2Z3","executionInfo":{"status":"ok","timestamp":1602225627643,"user_tz":-540,"elapsed":1082,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["import tensorflow as tf\n","import numpy as np\n","import matplotlib.pyplot as plt\n","plt.style.use('seaborn-whitegrid')\n","from collections import OrderedDict"],"execution_count":37,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"F1_2_jGMKGiT"},"source":["#### 데이터 로드"]},{"cell_type":"code","metadata":{"id":"S3SQq80sJ8mR","executionInfo":{"status":"ok","timestamp":1602225856836,"user_tz":-540,"elapsed":1966,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"0a5f46a3-4e40-4611-a79a-27f1b698b94f","colab":{"base_uri":"https://localhost:8080/","height":72}},"source":["np.random.seed(42)\n","\n","mnist = tf.keras.datasets.mnist\n","\n","(X_train, y_train), (X_test, y_test) = mnist.load_data()\n","\n","num_classes = 10"],"execution_count":38,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mv_pjKdxKKIy"},"source":["#### 데이터 전처리"]},{"cell_type":"code","metadata":{"id":"B95lI86tKIyY","executionInfo":{"status":"ok","timestamp":1602226002609,"user_tz":-540,"elapsed":1026,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["X_train, X_test = X_train.reshape(-1, 28 * 28).astype(np.float32), X_test.reshape(-1,28*28).astype(np.float32)\n","\n","X_train /= .255\n","X_test /= .255\n","\n","y_train = np.eye(num_classes)[y_train]"],"execution_count":41,"outputs":[]},{"cell_type":"code","metadata":{"id":"ar7DZIlMKLjJ","executionInfo":{"status":"ok","timestamp":1602226055862,"user_tz":-540,"elapsed":1281,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"74fea791-abcc-4411-c83e-aa42681f55ce","colab":{"base_uri":"https://localhost:8080/","height":87}},"source":["print(X_train.shape)\n","print(y_train.shape)\n","print(X_test.shape)\n","print(y_test.shape)\n"],"execution_count":43,"outputs":[{"output_type":"stream","text":["(60000, 784)\n","(60000, 10)\n","(10000, 784)\n","(10000,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Oye4pC82KPbg"},"source":["#### Hyper Parameters"]},{"cell_type":"code","metadata":{"id":"rFeXORJjKM7s","executionInfo":{"status":"ok","timestamp":1602236636687,"user_tz":-540,"elapsed":4288,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["epochs = 1000\n","learning_rate = 1e-3\n","batch_size = 100\n","train_size = X_train.shape[0]"],"execution_count":93,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cIdzuyRDKSm0"},"source":["#### Util Functions"]},{"cell_type":"code","metadata":{"id":"8E2_fN1dKRzv","executionInfo":{"status":"ok","timestamp":1602236637882,"user_tz":-540,"elapsed":4958,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["def softmax(x):\n","    if x.ndim == 2:\n","        x = x.T\n","        x = x - np.max(x, axis = 0)\n","        y = np.exp(x) / np.sum(np.exp(x), axis = 0)\n","        return y.T\n","        \n","    x = x - np.max(x)\n","    return np.exp(x) / np.sum(np.exp(x))\n","\n","def mean_squared_error(pred_y, true_y):\n","    return 0.5 * np.sum((pred_y- true_y)**2)\n","\n","def cross_entropy_error(pred_y, true_y):\n","    if pred_y.ndim == 1:\n","        true_y = true_y.reshape(1,true_y.size)\n","        pred_y = pred_y.reshape(1,pred_y.size)\n","\n","    if true_y.size == pred_y.size:\n","        true_y = true_y.argmax(axis = 1)        #trainingdata가 원핫백터면 정답의 인덱스를 반환하는거지\n","\n","    batch_size = pred_y.shape[0]\n","    return -np.sum(np.log(pred_y[np.arange(batch_size), true_y] + 1e-7)) / batch_size\n","\n","def softmax_loss(X,true_y):\n","    pred_y = softmax(X)\n","    return cross_entropy_error(pred_y, true_y)\n","\n","    "],"execution_count":94,"outputs":[]},{"cell_type":"code","metadata":{"id":"PcdS-9qtH5bP","executionInfo":{"status":"ok","timestamp":1602236638690,"user_tz":-540,"elapsed":5522,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":[""],"execution_count":94,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SBvWUNh-KY2R"},"source":["#### Util Classes"]},{"cell_type":"markdown","metadata":{"id":"rc0sLXWJs8Dq"},"source":["##### ReLU"]},{"cell_type":"code","metadata":{"id":"ej2m6Robs-uJ","executionInfo":{"status":"ok","timestamp":1602236638691,"user_tz":-540,"elapsed":4498,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["class ReLU():\n","    def __init__(self):\n","        self.out = None\n","\n","    def forward(self,x):\n","        self.mask = (x < 0)\n","        out = x.copy()\n","        out[x<0] = 0    # x가 0미만이면 다 0으로 바꾸기\n","        return out\n","\n","    def backward(self,dout):\n","        dout[self.mask] = 0\n","        dx = dout\n","        return dx"],"execution_count":95,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RucLfG0EtYcf"},"source":["##### Sigmoid"]},{"cell_type":"code","metadata":{"id":"TWoPmtpNtZ__","executionInfo":{"status":"ok","timestamp":1602236638692,"user_tz":-540,"elapsed":4234,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["class Sigmoid():\n","    def __init__(self):\n","        self.out = None\n","\n","    def forward(self,x):\n","        out = 1 / (1 + np.exp(-x))\n","        return out\n","\n","    def backward(self, dout):\n","        dx = dout* (1.0 - self.out) * self.dout\n","        return dx"],"execution_count":96,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IZZeNtd-tuM5"},"source":["##### Layer"]},{"cell_type":"code","metadata":{"id":"NEcCZ4bFtzgq","executionInfo":{"status":"ok","timestamp":1602236638694,"user_tz":-540,"elapsed":3778,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["class Layer():\n","\n","    def __init__(self,W,b):\n","        self.W = W\n","        self.b = b\n","\n","        self.x = None # 초기화니까 x는 none으로\n","        self.origin_x_shape = None\n","       \n","        self.dL_dW = None\n","        self.dL_db = None\n","\n","    def forward(self, x):\n","        self.origin_x_shape = x.shape\n","\n","        x = x.reshape(x.shape[0], -1)\n","        self.x = x\n","        out= np.dot(self.x, self.W) + self.b\n","\n","        return out\n","\n","    def backward(self,dout):\n","        dx = np.dot(dout,self.W.T)\n","        self.dL_dW = np.dot(self.x.T, dout)\n","        self.dL_db = np.sum(dout,axis = 0)\n","        dx = dx.reshape(*self.origin_x_shape)\n","        return dx"],"execution_count":97,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"s1Yqp7kVvOoD"},"source":["#### Softmax"]},{"cell_type":"code","metadata":{"id":"0RXBVEMdvP9r","executionInfo":{"status":"ok","timestamp":1602236638695,"user_tz":-540,"elapsed":2476,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["class Softmax():\n","\n","    def __init__(self):\n","        self.loss = None\n","        self.y = None\n","        self.t = None\n","\n","    def forward(self, x, t):\n","        self.t = t\n","        self.y = softmax(x)\n","        self.loss = cross_entropy_error(self.y, self.t)\n","\n","        return self.loss\n","\n","    def backward(self, dout = 1):\n","        batch_size = self.t.shape[0]\n","\n","        if self.t.size == self.y.size:\n","            dx = (self.y - self.t) / batch_size\n","\n","        else: \n","            dx = self.y.copy()\n","            dx[np.arange(batch_size), self.t] -= 1\n","            dx = dx / batch_size\n","\n","        return dx\n","        "],"execution_count":98,"outputs":[]},{"cell_type":"code","metadata":{"id":"sX4I-bKfuRaq","executionInfo":{"status":"ok","timestamp":1602236638696,"user_tz":-540,"elapsed":2338,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["class MyModel():\n","    def __init__(self, input_size, hidden_size_list, output_size, activation = 'relu'):\n","        self.input_size = input_size\n","        self.output_size = output_size\n","        self.hidden_size_list = hidden_size_list\n","        self.hidden_layer_num = len(hidden_size_list)\n","        self.params = {}\n","\n","        self.__init__weights(activation)\n","\n","        activation_layer = {'sigmoid' : Sigmoid, 'relu' : ReLU}\n","        self.layers = OrderedDict()\n","        for idx in range(1,self.hidden_layer_num + 1):\n","            self.layers['Layer' + str(idx)] = Layer(self.params['W' + str(idx)], self.params['b'+str(idx)])\n","            self.layers['Activation_function' + str(idx)] = activation_layer[activation]()\n","\n","    #activation_layer에서 현재 activation을 받아오고 relu면 relu를 넣으면 되겟지\n","\n","        idx = self.hidden_layer_num + 1\n","\n","        self.layers['Layer' + str(idx)] = Layer(self.params['W'+str(idx)], self.params['b' + str(idx)])\n","\n","        self.last_layer = Softmax()\n","\n","    def __init__weights(self, activation):\n","        weight_std = None\n","        all_size_list = [self.input_size] + self.hidden_size_list + [self.output_size]\n","        for idx in range(1,len(all_size_list)):\n","            if activation.lower() == 'relu':\n","                weight_std = np.sqrt(2.0 / self.input_size) # \n","            elif activation.lower() == 'sigmoid':\n","                weight_std = np.sqrt( 1.0 / self.input_size)    #사비에르 초기화?\n","\n","            self.params['W' + str(idx)] = weight_std * np.random.randn(all_size_list[idx-1],all_size_list[idx])\n","            self.params['b' + str(idx)] = np.random.randn(all_size_list[idx])\n","\n","    def predict(self, x):\n","        for layer in self.layers.values():\n","            x = layer.forward(x)\n","\n","        return x \n","\n","    def loss(self, x, true_y):\n","        pred_y =self.predict(x)\n","\n","        return self.last_layer.forward(pred_y, true_y)\n","\n","    def accuracy(self, x, true_y):\n","        pred_y = self.predict(x)\n","        pred_y = np.argmax(pred_y, axis = 1)\n","\n","        if true_y.ndim != 1:\n","            true_y = np.argmax(true_y, axis = 1)\n","\n","        accuracy = np.sum(pred_y == true_y) / float(x.shape[0])\n","        return accuracy\n","\n","    def gradient(self,x ,t):\n","        self.loss(x,t)\n","\n","        dout = 1\n","        dout = self.last_layer.backward(dout)\n","\n","        layers = list(self.layers.values())\n","        layers.reverse()\n","        for layer in layers:\n","            dout = layer.backward(dout)\n","\n","        grads = {}\n","        for idx in range(1,self.hidden_layer_num + 2):\n","            grads['W' + str(idx)] = self.layers['Layer' + str(idx)].dL_dW\n","            grads['b' + str(idx)] = self.layers['Layer' + str(idx)].dL_db\n","\n","        return grads"],"execution_count":99,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LwyNo3TsyDZR"},"source":["#### 모델 생성 및 학습"]},{"cell_type":"code","metadata":{"id":"Du5naLufxMvv","executionInfo":{"status":"ok","timestamp":1602236638696,"user_tz":-540,"elapsed":2139,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["model = MyModel(28*28, [100,64,32], 10,activation='relu')"],"execution_count":100,"outputs":[]},{"cell_type":"code","metadata":{"id":"Rb0HhW9x0mrN","executionInfo":{"status":"ok","timestamp":1602236638697,"user_tz":-540,"elapsed":1248,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["train_loss_list = []\n","train_acc_list = []\n","test_acc_list = []"],"execution_count":101,"outputs":[]},{"cell_type":"code","metadata":{"id":"VV5PciwAxM6s","executionInfo":{"status":"ok","timestamp":1602236665483,"user_tz":-540,"elapsed":25521,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"766823b1-bb3b-47af-b207-32df5f93d9cc","colab":{"base_uri":"https://localhost:8080/","height":369}},"source":["for epoch in range(epochs):\n","    batch_mask = np.random.choice(train_size, batch_size)\n","    x_batch = X_train[batch_mask]\n","    y_batch = y_train[batch_mask]\n","\n","    grad = model.gradient(x_batch, y_batch)\n","\n","    for key in model.params.keys():\n","        model.params[key] -= learning_rate * grad[key]\n","\n","    loss = model.loss(x_batch, y_batch)\n","    train_loss_list.append(loss)\n","\n","    if epoch % 50 == 0:\n","        train_acc = model.accuracy(X_train, y_train)\n","        test_acc = model.accuracy(X_test, y_test)\n","        train_acc_list.append(train_acc)\n","        test_acc_list.append(test_acc)\n","        print('epoch : {} Train accuracy: {:.4f} test accuracy: {:.4f}'.format(epoch+1, train_acc,test_acc))"],"execution_count":102,"outputs":[{"output_type":"stream","text":["epoch : 1 Train accuracy: 0.1208 test accuracy: 0.1201\n","epoch : 51 Train accuracy: 0.4272 test accuracy: 0.4372\n","epoch : 101 Train accuracy: 0.5534 test accuracy: 0.5654\n","epoch : 151 Train accuracy: 0.6549 test accuracy: 0.6642\n","epoch : 201 Train accuracy: 0.7157 test accuracy: 0.7223\n","epoch : 251 Train accuracy: 0.7622 test accuracy: 0.7693\n","epoch : 301 Train accuracy: 0.7855 test accuracy: 0.7936\n","epoch : 351 Train accuracy: 0.8024 test accuracy: 0.8094\n","epoch : 401 Train accuracy: 0.8074 test accuracy: 0.8150\n","epoch : 451 Train accuracy: 0.8167 test accuracy: 0.8247\n","epoch : 501 Train accuracy: 0.8327 test accuracy: 0.8394\n","epoch : 551 Train accuracy: 0.8333 test accuracy: 0.8407\n","epoch : 601 Train accuracy: 0.8441 test accuracy: 0.8496\n","epoch : 651 Train accuracy: 0.8423 test accuracy: 0.8464\n","epoch : 701 Train accuracy: 0.8552 test accuracy: 0.8618\n","epoch : 751 Train accuracy: 0.8569 test accuracy: 0.8636\n","epoch : 801 Train accuracy: 0.8693 test accuracy: 0.8742\n","epoch : 851 Train accuracy: 0.8727 test accuracy: 0.8753\n","epoch : 901 Train accuracy: 0.8644 test accuracy: 0.8658\n","epoch : 951 Train accuracy: 0.8736 test accuracy: 0.8749\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dqqlZOF6KjDl","executionInfo":{"status":"ok","timestamp":1602236665485,"user_tz":-540,"elapsed":25106,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}}},"source":["# 이전에 없던 backpropagation을 넣으니까 더 빨라졌네"],"execution_count":102,"outputs":[]},{"cell_type":"code","metadata":{"id":"hbFdITNIwGYU","executionInfo":{"status":"ok","timestamp":1602236839721,"user_tz":-540,"elapsed":1368,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"c67e8a04-6c07-4938-b1ef-c4927ee994bd","colab":{"base_uri":"https://localhost:8080/","height":291}},"source":["plt.plot(np.arange(1000//50), train_acc_list, 'r--', label = 'train_acc')\n","plt.plot(np.arange(1000//50), test_acc_list, 'b', label = 'test_acc')\n","\n","plt.title('result')\n","plt.xlabel('eopchs')\n","plt.legend(loc=5)\n","plt.grid()\n","plt.show()"],"execution_count":103,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"_BwHrt9nP8y8","executionInfo":{"status":"ok","timestamp":1602236928496,"user_tz":-540,"elapsed":1162,"user":{"displayName":"박성흠","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi9Cj6D2h5-5RlAvSAB86oovrFwm59mGWcldbpX=s64","userId":"17794821546298080880"}},"outputId":"1567e1d7-4bab-49f2-98c4-ed30e6de540b","colab":{"base_uri":"https://localhost:8080/","height":291}},"source":["plt.plot(np.arange(1000), train_loss_list, 'green', label = 'train_loss')\n","plt.title('Train loss')\n","plt.xlabel('epochs')\n","plt.legend(loc = 5)\n","plt.grid()\n","plt.show()"],"execution_count":104,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]}]}